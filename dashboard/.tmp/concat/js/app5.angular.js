// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }
  // need to use the urlBase as the base to handle multiple
  // loopback servers behind a proxy/gateway where the host
  // would be the same.
  var urlBaseHost = getHost(urlBase) ? urlBase : location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__findById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__destroyById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__updateById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__get__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__create__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__delete__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__count__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Counts accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Users",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsertWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Users/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$patchAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Users/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$verify
             * @methodOf lbServices.User
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Users/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#changePassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Users/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#setPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Users/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreateWithWhere
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/RoleMappings",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/RoleMappings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsertWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/RoleMappings/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/RoleMappings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$patchAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreateWithWhere
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - RoleMapping id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Roles",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Roles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsertWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Roles/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Roles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$patchAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreateWithWhere
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Role id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.MemberGroup
 * @header lbServices.MemberGroup
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `MemberGroup` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "MemberGroup",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/MemberGroups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use MemberGroup.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/MemberGroups/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#create
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/MemberGroups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#patchOrCreate
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/MemberGroups",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#replaceOrCreate
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/MemberGroups/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#upsertWithWhere
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/MemberGroups/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#exists
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/MemberGroups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#findById
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/MemberGroups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#replaceById
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/MemberGroups/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#find
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/MemberGroups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#findOne
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/MemberGroups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#updateAll
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/MemberGroups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#deleteById
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/MemberGroups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#count
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/MemberGroups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#prototype$patchAttributes
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MemberGroup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/MemberGroups/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#createChangeStream
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/MemberGroups/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#createMany
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/MemberGroups",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#upsert
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#updateOrCreate
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#patchOrCreateWithWhere
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#update
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#destroyById
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#removeById
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#prototype$updateAttributes
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MemberGroup id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `MemberGroup` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.MemberGroup#modelName
        * @propertyOf lbServices.MemberGroup
        * @description
        * The name of the model represented by this $resource,
        * i.e. `MemberGroup`.
        */
        R.modelName = "MemberGroup";


            /**
             * @ngdoc method
             * @name lbServices.MemberGroup#business
             * @methodOf lbServices.MemberGroup
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - MemberGroup id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::MemberGroup::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Business
 * @header lbServices.Business
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Business` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Business",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Businesses/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__findById__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__updateById__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.nas.findById() instead.
            "prototype$__findById__nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.nas.destroyById() instead.
            "prototype$__destroyById__nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.nas.updateById() instead.
            "prototype$__updateById__nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.members.findById() instead.
            "prototype$__findById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.members.destroyById() instead.
            "prototype$__destroyById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.members.updateById() instead.
            "prototype$__updateById__members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.internetPlans.findById() instead.
            "prototype$__findById__internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.internetPlans.destroyById() instead.
            "prototype$__destroyById__internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.internetPlans.updateById() instead.
            "prototype$__updateById__internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.invoices.findById() instead.
            "prototype$__findById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.invoices.destroyById() instead.
            "prototype$__destroyById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.invoices.updateById() instead.
            "prototype$__updateById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.fileStorages.findById() instead.
            "prototype$__findById__fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.fileStorages.destroyById() instead.
            "prototype$__destroyById__fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.fileStorages.updateById() instead.
            "prototype$__updateById__fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.resellers() instead.
            "prototype$__get__resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "GET",
            },

            // INTERNAL. Use Business.resellers.create() instead.
            "prototype$__create__resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "POST",
            },

            // INTERNAL. Use Business.resellers.update() instead.
            "prototype$__update__resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "PUT",
            },

            // INTERNAL. Use Business.resellers.destroy() instead.
            "prototype$__destroy__resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "DELETE",
            },

            // INTERNAL. Use Business.coupons.findById() instead.
            "prototype$__findById__coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.coupons.destroyById() instead.
            "prototype$__destroyById__coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.coupons.updateById() instead.
            "prototype$__updateById__coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.tickets.findById() instead.
            "prototype$__findById__tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.tickets.destroyById() instead.
            "prototype$__destroyById__tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.tickets.updateById() instead.
            "prototype$__updateById__tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.reports.findById() instead.
            "prototype$__findById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.reports.destroyById() instead.
            "prototype$__destroyById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.reports.updateById() instead.
            "prototype$__updateById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.departments.findById() instead.
            "prototype$__findById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.departments.destroyById() instead.
            "prototype$__destroyById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.departments.updateById() instead.
            "prototype$__updateById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.operators.findById() instead.
            "prototype$__findById__operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.operators.destroyById() instead.
            "prototype$__destroyById__operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.operators.updateById() instead.
            "prototype$__updateById__operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__get__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries accessTokens of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Businesses/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__create__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Businesses/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__delete__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Businesses/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$__count__accessTokens
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Counts accessTokens of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Businesses/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Business.nas() instead.
            "prototype$__get__nas": {
              isArray: true,
              url: urlBase + "/Businesses/:id/nas",
              method: "GET",
            },

            // INTERNAL. Use Business.nas.create() instead.
            "prototype$__create__nas": {
              url: urlBase + "/Businesses/:id/nas",
              method: "POST",
            },

            // INTERNAL. Use Business.nas.destroyAll() instead.
            "prototype$__delete__nas": {
              url: urlBase + "/Businesses/:id/nas",
              method: "DELETE",
            },

            // INTERNAL. Use Business.nas.count() instead.
            "prototype$__count__nas": {
              url: urlBase + "/Businesses/:id/nas/count",
              method: "GET",
            },

            // INTERNAL. Use Business.members() instead.
            "prototype$__get__members": {
              isArray: true,
              url: urlBase + "/Businesses/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Business.members.create() instead.
            "prototype$__create__members": {
              url: urlBase + "/Businesses/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Business.members.destroyAll() instead.
            "prototype$__delete__members": {
              url: urlBase + "/Businesses/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Business.members.count() instead.
            "prototype$__count__members": {
              url: urlBase + "/Businesses/:id/members/count",
              method: "GET",
            },

            // INTERNAL. Use Business.internetPlans() instead.
            "prototype$__get__internetPlans": {
              isArray: true,
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "GET",
            },

            // INTERNAL. Use Business.internetPlans.create() instead.
            "prototype$__create__internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "POST",
            },

            // INTERNAL. Use Business.internetPlans.destroyAll() instead.
            "prototype$__delete__internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "DELETE",
            },

            // INTERNAL. Use Business.internetPlans.count() instead.
            "prototype$__count__internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans/count",
              method: "GET",
            },

            // INTERNAL. Use Business.invoices() instead.
            "prototype$__get__invoices": {
              isArray: true,
              url: urlBase + "/Businesses/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Business.invoices.create() instead.
            "prototype$__create__invoices": {
              url: urlBase + "/Businesses/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Business.invoices.destroyAll() instead.
            "prototype$__delete__invoices": {
              url: urlBase + "/Businesses/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Business.invoices.count() instead.
            "prototype$__count__invoices": {
              url: urlBase + "/Businesses/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Business.fileStorages() instead.
            "prototype$__get__fileStorages": {
              isArray: true,
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "GET",
            },

            // INTERNAL. Use Business.fileStorages.create() instead.
            "prototype$__create__fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "POST",
            },

            // INTERNAL. Use Business.fileStorages.destroyAll() instead.
            "prototype$__delete__fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "DELETE",
            },

            // INTERNAL. Use Business.fileStorages.count() instead.
            "prototype$__count__fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages/count",
              method: "GET",
            },

            // INTERNAL. Use Business.coupons() instead.
            "prototype$__get__coupons": {
              isArray: true,
              url: urlBase + "/Businesses/:id/coupons",
              method: "GET",
            },

            // INTERNAL. Use Business.coupons.create() instead.
            "prototype$__create__coupons": {
              url: urlBase + "/Businesses/:id/coupons",
              method: "POST",
            },

            // INTERNAL. Use Business.coupons.destroyAll() instead.
            "prototype$__delete__coupons": {
              url: urlBase + "/Businesses/:id/coupons",
              method: "DELETE",
            },

            // INTERNAL. Use Business.coupons.count() instead.
            "prototype$__count__coupons": {
              url: urlBase + "/Businesses/:id/coupons/count",
              method: "GET",
            },

            // INTERNAL. Use Business.tickets() instead.
            "prototype$__get__tickets": {
              isArray: true,
              url: urlBase + "/Businesses/:id/tickets",
              method: "GET",
            },

            // INTERNAL. Use Business.tickets.create() instead.
            "prototype$__create__tickets": {
              url: urlBase + "/Businesses/:id/tickets",
              method: "POST",
            },

            // INTERNAL. Use Business.tickets.destroyAll() instead.
            "prototype$__delete__tickets": {
              url: urlBase + "/Businesses/:id/tickets",
              method: "DELETE",
            },

            // INTERNAL. Use Business.tickets.count() instead.
            "prototype$__count__tickets": {
              url: urlBase + "/Businesses/:id/tickets/count",
              method: "GET",
            },

            // INTERNAL. Use Business.reports() instead.
            "prototype$__get__reports": {
              isArray: true,
              url: urlBase + "/Businesses/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Business.reports.create() instead.
            "prototype$__create__reports": {
              url: urlBase + "/Businesses/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Business.reports.destroyAll() instead.
            "prototype$__delete__reports": {
              url: urlBase + "/Businesses/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Business.reports.count() instead.
            "prototype$__count__reports": {
              url: urlBase + "/Businesses/:id/reports/count",
              method: "GET",
            },

            // INTERNAL. Use Business.departments() instead.
            "prototype$__get__departments": {
              isArray: true,
              url: urlBase + "/Businesses/:id/departments",
              method: "GET",
            },

            // INTERNAL. Use Business.departments.create() instead.
            "prototype$__create__departments": {
              url: urlBase + "/Businesses/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Business.departments.destroyAll() instead.
            "prototype$__delete__departments": {
              url: urlBase + "/Businesses/:id/departments",
              method: "DELETE",
            },

            // INTERNAL. Use Business.departments.count() instead.
            "prototype$__count__departments": {
              url: urlBase + "/Businesses/:id/departments/count",
              method: "GET",
            },

            // INTERNAL. Use Business.operators() instead.
            "prototype$__get__operators": {
              isArray: true,
              url: urlBase + "/Businesses/:id/operators",
              method: "GET",
            },

            // INTERNAL. Use Business.operators.create() instead.
            "prototype$__create__operators": {
              url: urlBase + "/Businesses/:id/operators",
              method: "POST",
            },

            // INTERNAL. Use Business.operators.destroyAll() instead.
            "prototype$__delete__operators": {
              url: urlBase + "/Businesses/:id/operators",
              method: "DELETE",
            },

            // INTERNAL. Use Business.operators.count() instead.
            "prototype$__count__operators": {
              url: urlBase + "/Businesses/:id/operators/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#create
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Businesses",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#patchOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Businesses",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#replaceOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Businesses/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#upsertWithWhere
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Businesses/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#exists
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Businesses/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#findById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Businesses/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#replaceById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Businesses/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#find
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Businesses",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#findOne
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Businesses/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#updateAll
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Businesses/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#deleteById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Businesses/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#count
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Businesses/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$patchAttributes
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Businesses/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#createChangeStream
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Businesses/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#login
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Businesses/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#logout
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Businesses/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$verify
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Businesses/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#confirm
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Businesses/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#resetPassword
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Businesses/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#changePassword
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Businesses/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#setPassword
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Businesses/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#registerNewLicense
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Register A New License 
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobile` – `{string}` -
             *
             *  - `fullName` – `{string}` -
             *
             *  - `title` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "registerNewLicense": {
              url: urlBase + "/Businesses/registerNewLicense",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#getMyDepartments
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Register A New License 
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "getMyDepartments": {
              url: urlBase + "/Businesses/getMyDepartments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadConfig
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Load business config
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "loadConfig": {
              url: urlBase + "/Businesses/loadConfig",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#reloadLicense
             * @methodOf lbServices.Business
             *
             * @description
             *
             * reloadLicense
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "reloadLicense": {
              url: urlBase + "/Businesses/reloadLicense",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#buyPackage
             * @methodOf lbServices.Business
             *
             * @description
             *
             * buyService for business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `packageId` – `{string}` -
             *
             *  - `discount` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "buyPackage": {
              url: urlBase + "/Businesses/buyPackage",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#assignPackageToBusiness
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `packageId` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "assignPackageToBusiness": {
              url: urlBase + "/Businesses/assignPackageToBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#buyCredit
             * @methodOf lbServices.Business
             *
             * @description
             *
             * payment by business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `rialPrice` – `{number}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "buyCredit": {
              url: urlBase + "/Businesses/buyCredit",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#adminChargeCredit
             * @methodOf lbServices.Business
             *
             * @description
             *
             * payment by admin
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `rialPrice` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "adminChargeCredit": {
              url: urlBase + "/Businesses/adminChargeCredit",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#getBalance
             * @methodOf lbServices.Business
             *
             * @description
             *
             * get balance of the business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "getBalance": {
              url: urlBase + "/Businesses/getBalance",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#getTrafficUsage
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Find data for traffic usage chart from data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `startDate` – `{number}` - Start Date
             *
             *  - `endDate` – `{number}` - End Date
             *
             *  - `departmentId` – `{string=}` - Department
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "getTrafficUsage": {
              url: urlBase + "/Businesses/getTrafficUsage",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadServiceInfo
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Load business packages
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "loadServiceInfo": {
              url: urlBase + "/Businesses/loadServiceInfo",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#getResellerMobile
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Get Reseller Mobile Number of Business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "getResellerMobile": {
              url: urlBase + "/Businesses/getResellerMobile",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#hasValidSubscription
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Check if business has valid subscription
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `business` – `{Object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "hasValidSubscription": {
              url: urlBase + "/Businesses/hasValidSubscription",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadServices
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "loadServices": {
              url: urlBase + "/Businesses/loadServices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadResellersPackages
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "loadResellersPackages": {
              url: urlBase + "/Businesses/loadResellersPackages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#resetPasswordByAdmin
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `password` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "resetPasswordByAdmin": {
              url: urlBase + "/Businesses/resetPasswordByAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#makeBackup
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "makeBackup": {
              url: urlBase + "/Businesses/makeBackup",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#restoreBackupFromApi
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `url` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "restoreBackupFromApi": {
              url: urlBase + "/Businesses/restoreBackupFromApi",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#restoreBackup
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `backup` – `{object}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "restoreBackup": {
              url: urlBase + "/Businesses/restoreBackup",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#destroyMembersById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `memberIds` – `{*}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "destroyMembersById": {
              url: urlBase + "/Businesses/destroyMembersById",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#paypingAuthorization
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "paypingAuthorization": {
              url: urlBase + "/Businesses/paypingAuthorization",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#dropBoxAuthorization
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "dropBoxAuthorization": {
              url: urlBase + "/Businesses/dropBoxAuthorization",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadMembersUsernames
             * @methodOf lbServices.Business
             *
             * @description
             *
             * load members usernames
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `members` – `{Array=}` -
             */
            "loadMembersUsernames": {
              url: urlBase + "/Businesses/loadMembersUsernames",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#destroyReportsById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `reportIds` – `{*}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "destroyReportsById": {
              url: urlBase + "/Businesses/destroyReportsById",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#loadNasTitles
             * @methodOf lbServices.Business
             *
             * @description
             *
             * load nas by titles
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `nas` – `{Array=}` -
             */
            "loadNasTitles": {
              url: urlBase + "/Businesses/loadNasTitles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#createMany
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Businesses",
              method: "POST",
            },

            // INTERNAL. Use MemberGroup.business() instead.
            "::get::MemberGroup::business": {
              url: urlBase + "/MemberGroups/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Nas.business() instead.
            "::get::Nas::business": {
              url: urlBase + "/Nas/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Member.business() instead.
            "::get::Member::business": {
              url: urlBase + "/Members/:id/business",
              method: "GET",
            },

            // INTERNAL. Use InternetPlan.business() instead.
            "::get::InternetPlan::business": {
              url: urlBase + "/InternetPlans/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Invoice.business() instead.
            "::get::Invoice::business": {
              url: urlBase + "/Invoices/:id/business",
              method: "GET",
            },

            // INTERNAL. Use ClientSession.business() instead.
            "::get::ClientSession::business": {
              url: urlBase + "/ClientSessions/:id/business",
              method: "GET",
            },

            // INTERNAL. Use FileStorage.business() instead.
            "::get::FileStorage::business": {
              url: urlBase + "/FileStorages/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses.findById() instead.
            "::findById::Reseller::businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses.destroyById() instead.
            "::destroyById::Reseller::businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.businesses.updateById() instead.
            "::updateById::Reseller::businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Reseller.businesses() instead.
            "::get::Reseller::businesses": {
              isArray: true,
              url: urlBase + "/Resellers/:id/businesses",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses.create() instead.
            "::create::Reseller::businesses": {
              url: urlBase + "/Resellers/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Reseller.businesses.createMany() instead.
            "::createMany::Reseller::businesses": {
              isArray: true,
              url: urlBase + "/Resellers/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Reseller.businesses.destroyAll() instead.
            "::delete::Reseller::businesses": {
              url: urlBase + "/Resellers/:id/businesses",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.businesses.count() instead.
            "::count::Reseller::businesses": {
              url: urlBase + "/Resellers/:id/businesses/count",
              method: "GET",
            },

            // INTERNAL. Use Coupon.business() instead.
            "::get::Coupon::business": {
              url: urlBase + "/Coupons/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Ticket.business() instead.
            "::get::Ticket::business": {
              url: urlBase + "/Tickets/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Usage.business() instead.
            "::get::Usage::business": {
              url: urlBase + "/Usages/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Report.businesses() instead.
            "::get::Report::businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "GET",
            },

            // INTERNAL. Use Report.businesses.create() instead.
            "::create::Report::businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Report.businesses.createMany() instead.
            "::createMany::Report::businesses": {
              isArray: true,
              url: urlBase + "/Reports/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Report.businesses.update() instead.
            "::update::Report::businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "PUT",
            },

            // INTERNAL. Use Report.businesses.destroy() instead.
            "::destroy::Report::businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "DELETE",
            },

            // INTERNAL. Use Department.business() instead.
            "::get::Department::business": {
              url: urlBase + "/Departments/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Operator.business() instead.
            "::get::Operator::business": {
              url: urlBase + "/Operators/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Business#getCurrent
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Businesses" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Business#upsert
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Business#updateOrCreate
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Business#patchOrCreateWithWhere
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Business#update
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Business#destroyById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Business#removeById
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Business#prototype$updateAttributes
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Business#getCachedCurrent
         * @methodOf lbServices.Business
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Business#login} or
         * {@link lbServices.Business#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Business instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Business#isAuthenticated
         * @methodOf lbServices.Business
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Business#getCurrentId
         * @methodOf lbServices.Business
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Business#modelName
        * @propertyOf lbServices.Business
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Business`.
        */
        R.modelName = "Business";

    /**
     * @ngdoc object
     * @name lbServices.Business.nas
     * @header lbServices.Business.nas
     * @object
     * @description
     *
     * The object `Business.nas` groups methods
     * manipulating `Nas` instances related to `Business`.
     *
     * Call {@link lbServices.Business#nas Business.nas()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#nas
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries nas of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R.nas = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::get::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#count
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Counts nas of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.nas.count = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::count::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#create
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Creates a new instance in nas of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R.nas.create = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::create::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#createMany
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Creates a new instance in nas of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R.nas.createMany = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::createMany::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#destroyAll
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Deletes all nas of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.nas.destroyAll = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::delete::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#destroyById
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Delete a related item by id for nas.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for nas
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.nas.destroyById = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::destroyById::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#findById
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Find a related item by id for nas.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for nas
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R.nas.findById = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::findById::Business::nas"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.nas#updateById
             * @methodOf lbServices.Business.nas
             *
             * @description
             *
             * Update a related item by id for nas.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for nas
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R.nas.updateById = function() {
          var TargetResource = $injector.get("Nas");
          var action = TargetResource["::updateById::Business::nas"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.members
     * @header lbServices.Business.members
     * @object
     * @description
     *
     * The object `Business.members` groups methods
     * manipulating `Member` instances related to `Business`.
     *
     * Call {@link lbServices.Business#members Business.members()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#members
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries members of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::get::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#count
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Counts members of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.members.count = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::count::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#create
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.create = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::create::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#createMany
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.createMany = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::createMany::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#destroyAll
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Deletes all members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroyAll = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::delete::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#destroyById
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Delete a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for members
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroyById = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::destroyById::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#findById
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Find a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for members
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.findById = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::findById::Business::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.members#updateById
             * @methodOf lbServices.Business.members
             *
             * @description
             *
             * Update a related item by id for members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for members
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.updateById = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::updateById::Business::members"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.internetPlans
     * @header lbServices.Business.internetPlans
     * @object
     * @description
     *
     * The object `Business.internetPlans` groups methods
     * manipulating `InternetPlan` instances related to `Business`.
     *
     * Call {@link lbServices.Business#internetPlans Business.internetPlans()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#internetPlans
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries internetPlans of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R.internetPlans = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::get::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#count
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Counts internetPlans of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.internetPlans.count = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::count::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#create
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Creates a new instance in internetPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R.internetPlans.create = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::create::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#createMany
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Creates a new instance in internetPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R.internetPlans.createMany = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::createMany::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#destroyAll
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Deletes all internetPlans of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.internetPlans.destroyAll = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::delete::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#destroyById
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Delete a related item by id for internetPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for internetPlans
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.internetPlans.destroyById = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::destroyById::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#findById
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Find a related item by id for internetPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for internetPlans
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R.internetPlans.findById = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::findById::Business::internetPlans"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.internetPlans#updateById
             * @methodOf lbServices.Business.internetPlans
             *
             * @description
             *
             * Update a related item by id for internetPlans.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for internetPlans
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R.internetPlans.updateById = function() {
          var TargetResource = $injector.get("InternetPlan");
          var action = TargetResource["::updateById::Business::internetPlans"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.invoices
     * @header lbServices.Business.invoices
     * @object
     * @description
     *
     * The object `Business.invoices` groups methods
     * manipulating `Invoice` instances related to `Business`.
     *
     * Call {@link lbServices.Business#invoices Business.invoices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#invoices
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries invoices of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::get::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#count
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Counts invoices of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.invoices.count = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::count::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#create
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.create = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::create::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#createMany
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.createMany = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::createMany::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#destroyAll
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Deletes all invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyAll = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::delete::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#destroyById
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Delete a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::destroyById::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#findById
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Find a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.findById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::findById::Business::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.invoices#updateById
             * @methodOf lbServices.Business.invoices
             *
             * @description
             *
             * Update a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.updateById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::updateById::Business::invoices"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.fileStorages
     * @header lbServices.Business.fileStorages
     * @object
     * @description
     *
     * The object `Business.fileStorages` groups methods
     * manipulating `FileStorage` instances related to `Business`.
     *
     * Call {@link lbServices.Business#fileStorages Business.fileStorages()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#fileStorages
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries fileStorages of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorages = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::get::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#count
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Counts fileStorages of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.fileStorages.count = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::count::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#create
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Creates a new instance in fileStorages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorages.create = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::create::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#createMany
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Creates a new instance in fileStorages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorages.createMany = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::createMany::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#destroyAll
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Deletes all fileStorages of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fileStorages.destroyAll = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::delete::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#destroyById
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Delete a related item by id for fileStorages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fileStorages
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fileStorages.destroyById = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::destroyById::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#findById
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Find a related item by id for fileStorages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for fileStorages
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorages.findById = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::findById::Business::fileStorages"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.fileStorages#updateById
             * @methodOf lbServices.Business.fileStorages
             *
             * @description
             *
             * Update a related item by id for fileStorages.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for fileStorages
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorages.updateById = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::updateById::Business::fileStorages"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.resellers
     * @header lbServices.Business.resellers
     * @object
     * @description
     *
     * The object `Business.resellers` groups methods
     * manipulating `Reseller` instances related to `Business`.
     *
     * Call {@link lbServices.Business#resellers Business.resellers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#resellers
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Fetches hasOne relation resellers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R.resellers = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::get::Business::resellers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.resellers#create
             * @methodOf lbServices.Business.resellers
             *
             * @description
             *
             * Creates a new instance in resellers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R.resellers.create = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::create::Business::resellers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.resellers#createMany
             * @methodOf lbServices.Business.resellers
             *
             * @description
             *
             * Creates a new instance in resellers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R.resellers.createMany = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::createMany::Business::resellers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.resellers#destroy
             * @methodOf lbServices.Business.resellers
             *
             * @description
             *
             * Deletes resellers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.resellers.destroy = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::destroy::Business::resellers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.resellers#update
             * @methodOf lbServices.Business.resellers
             *
             * @description
             *
             * Update resellers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R.resellers.update = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::update::Business::resellers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.coupons
     * @header lbServices.Business.coupons
     * @object
     * @description
     *
     * The object `Business.coupons` groups methods
     * manipulating `Coupon` instances related to `Business`.
     *
     * Call {@link lbServices.Business#coupons Business.coupons()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#coupons
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries coupons of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R.coupons = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::get::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#count
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Counts coupons of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.coupons.count = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::count::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#create
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Creates a new instance in coupons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R.coupons.create = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::create::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#createMany
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Creates a new instance in coupons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R.coupons.createMany = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::createMany::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#destroyAll
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Deletes all coupons of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.coupons.destroyAll = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::delete::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#destroyById
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Delete a related item by id for coupons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for coupons
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.coupons.destroyById = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::destroyById::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#findById
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Find a related item by id for coupons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for coupons
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R.coupons.findById = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::findById::Business::coupons"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.coupons#updateById
             * @methodOf lbServices.Business.coupons
             *
             * @description
             *
             * Update a related item by id for coupons.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for coupons
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R.coupons.updateById = function() {
          var TargetResource = $injector.get("Coupon");
          var action = TargetResource["::updateById::Business::coupons"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.tickets
     * @header lbServices.Business.tickets
     * @object
     * @description
     *
     * The object `Business.tickets` groups methods
     * manipulating `Ticket` instances related to `Business`.
     *
     * Call {@link lbServices.Business#tickets Business.tickets()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#tickets
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries tickets of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R.tickets = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::get::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#count
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Counts tickets of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.tickets.count = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::count::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#create
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Creates a new instance in tickets of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R.tickets.create = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::create::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#createMany
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Creates a new instance in tickets of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R.tickets.createMany = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::createMany::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#destroyAll
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Deletes all tickets of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tickets.destroyAll = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::delete::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#destroyById
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Delete a related item by id for tickets.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for tickets
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.tickets.destroyById = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::destroyById::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#findById
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Find a related item by id for tickets.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for tickets
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R.tickets.findById = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::findById::Business::tickets"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.tickets#updateById
             * @methodOf lbServices.Business.tickets
             *
             * @description
             *
             * Update a related item by id for tickets.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for tickets
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R.tickets.updateById = function() {
          var TargetResource = $injector.get("Ticket");
          var action = TargetResource["::updateById::Business::tickets"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.reports
     * @header lbServices.Business.reports
     * @object
     * @description
     *
     * The object `Business.reports` groups methods
     * manipulating `Report` instances related to `Business`.
     *
     * Call {@link lbServices.Business#reports Business.reports()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#reports
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries reports of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::get::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#count
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Counts reports of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.reports.count = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::count::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#create
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.create = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::create::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#createMany
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.createMany = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::createMany::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#destroyAll
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Deletes all reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyAll = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::delete::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#destroyById
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Delete a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::destroyById::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#findById
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Find a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.findById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::findById::Business::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.reports#updateById
             * @methodOf lbServices.Business.reports
             *
             * @description
             *
             * Update a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.updateById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::updateById::Business::reports"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.departments
     * @header lbServices.Business.departments
     * @object
     * @description
     *
     * The object `Business.departments` groups methods
     * manipulating `Department` instances related to `Business`.
     *
     * Call {@link lbServices.Business#departments Business.departments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#departments
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries departments of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#count
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Counts departments of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.departments.count = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::count::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#create
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Creates a new instance in departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.create = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::create::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#createMany
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Creates a new instance in departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.createMany = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::createMany::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#destroyAll
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Deletes all departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.departments.destroyAll = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::delete::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#destroyById
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Delete a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.departments.destroyById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::destroyById::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#findById
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Find a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.findById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::findById::Business::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.departments#updateById
             * @methodOf lbServices.Business.departments
             *
             * @description
             *
             * Update a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.updateById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::updateById::Business::departments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Business.operators
     * @header lbServices.Business.operators
     * @object
     * @description
     *
     * The object `Business.operators` groups methods
     * manipulating `Operator` instances related to `Business`.
     *
     * Call {@link lbServices.Business#operators Business.operators()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Business#operators
             * @methodOf lbServices.Business
             *
             * @description
             *
             * Queries operators of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R.operators = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::get::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#count
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Counts operators of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.operators.count = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::count::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#create
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Creates a new instance in operators of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R.operators.create = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::create::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#createMany
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Creates a new instance in operators of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R.operators.createMany = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::createMany::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#destroyAll
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Deletes all operators of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.operators.destroyAll = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::delete::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#destroyById
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Delete a related item by id for operators.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for operators
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.operators.destroyById = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::destroyById::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#findById
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Find a related item by id for operators.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for operators
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R.operators.findById = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::findById::Business::operators"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Business.operators#updateById
             * @methodOf lbServices.Business.operators
             *
             * @description
             *
             * Update a related item by id for operators.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Business id
             *
             *  - `fk` – `{*}` - Foreign key for operators
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R.operators.updateById = function() {
          var TargetResource = $injector.get("Operator");
          var action = TargetResource["::updateById::Business::operators"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Nas
 * @header lbServices.Nas
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Nas` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Nas",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Nas/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Nas.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Nas/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#create
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Nas",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#patchOrCreate
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Nas",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#replaceOrCreate
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Nas/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#upsertWithWhere
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Nas/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#exists
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Nas/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#findById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Nas/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#replaceById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Nas/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#find
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Nas",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#findOne
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Nas/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#updateAll
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Nas/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#deleteById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Nas/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#count
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Nas/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#prototype$patchAttributes
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Nas id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Nas/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#createChangeStream
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Nas/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#loadRouterInfo
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Load router info
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `nasId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "loadRouterInfo": {
              url: urlBase + "/Nas/loadRouterInfo",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#loadThemeConfigById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Load loadThemeConfigById 
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `nasId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "loadThemeConfigById": {
              url: urlBase + "/Nas/loadThemeConfigById",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#loadRadiusInfo
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Load router info
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "loadRadiusInfo": {
              url: urlBase + "/Nas/loadRadiusInfo",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Nas#createMany
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Nas",
              method: "POST",
            },

            // INTERNAL. Use Business.nas.findById() instead.
            "::findById::Business::nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.nas.destroyById() instead.
            "::destroyById::Business::nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.nas.updateById() instead.
            "::updateById::Business::nas": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/nas/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.nas() instead.
            "::get::Business::nas": {
              isArray: true,
              url: urlBase + "/Businesses/:id/nas",
              method: "GET",
            },

            // INTERNAL. Use Business.nas.create() instead.
            "::create::Business::nas": {
              url: urlBase + "/Businesses/:id/nas",
              method: "POST",
            },

            // INTERNAL. Use Business.nas.createMany() instead.
            "::createMany::Business::nas": {
              isArray: true,
              url: urlBase + "/Businesses/:id/nas",
              method: "POST",
            },

            // INTERNAL. Use Business.nas.destroyAll() instead.
            "::delete::Business::nas": {
              url: urlBase + "/Businesses/:id/nas",
              method: "DELETE",
            },

            // INTERNAL. Use Business.nas.count() instead.
            "::count::Business::nas": {
              url: urlBase + "/Businesses/:id/nas/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Nas#upsert
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#updateOrCreate
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#patchOrCreateWithWhere
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#update
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#destroyById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#removeById
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Nas#prototype$updateAttributes
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Nas id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Nas` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Nas#modelName
        * @propertyOf lbServices.Nas
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Nas`.
        */
        R.modelName = "Nas";


            /**
             * @ngdoc method
             * @name lbServices.Nas#business
             * @methodOf lbServices.Nas
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Nas id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Nas::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Member
 * @header lbServices.Member
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Member` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Member",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Members/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__findById__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__updateById__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Member.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Members/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.findById() instead.
            "prototype$__findById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.destroyById() instead.
            "prototype$__destroyById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Member.invoices.updateById() instead.
            "prototype$__updateById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Member.reports.findById() instead.
            "prototype$__findById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Member.reports.destroyById() instead.
            "prototype$__destroyById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Member.reports.updateById() instead.
            "prototype$__updateById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__get__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Queries accessTokens of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Members/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__create__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Members/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__delete__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Members/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$__count__accessTokens
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Counts accessTokens of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Members/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices() instead.
            "prototype$__get__invoices": {
              isArray: true,
              url: urlBase + "/Members/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.create() instead.
            "prototype$__create__invoices": {
              url: urlBase + "/Members/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Member.invoices.destroyAll() instead.
            "prototype$__delete__invoices": {
              url: urlBase + "/Members/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Member.invoices.count() instead.
            "prototype$__count__invoices": {
              url: urlBase + "/Members/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Member.reports() instead.
            "prototype$__get__reports": {
              isArray: true,
              url: urlBase + "/Members/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Member.reports.create() instead.
            "prototype$__create__reports": {
              url: urlBase + "/Members/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Member.reports.destroyAll() instead.
            "prototype$__delete__reports": {
              url: urlBase + "/Members/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Member.reports.count() instead.
            "prototype$__count__reports": {
              url: urlBase + "/Members/:id/reports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#create
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Members",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#patchOrCreate
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Members",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#replaceOrCreate
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Members/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#upsertWithWhere
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Members/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#exists
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Members/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#findById
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Members/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#replaceById
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Members/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#find
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Members",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#findOne
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Members/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#updateAll
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Members/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#deleteById
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Members/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#count
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Members/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$patchAttributes
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Members/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#createChangeStream
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Members/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#login
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Members/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#logout
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Members/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$verify
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Members/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#confirm
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Members/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#resetPassword
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Members/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#changePassword
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Members/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#setPassword
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Members/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#signIn
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             *  - `routerType` – `{string}` -
             *
             *  - `nasId` – `{string}` -
             *
             *  - `pinCode` – `{string=}` -
             *
             *  - `mac` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "signIn": {
              url: urlBase + "/Members/signIn",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getMembersChart
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find data for chart of members from data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `startDate` – `{string}` - Start Date
             *
             *  - `endDate` – `{string}` - End Date
             *
             *  - `businessId` – `{string}` - business ID
             *
             *  - `offset` – `{number=}` - Time Zone
             *
             *  - `monthDays` – `{*=}` - Days Of Month
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{Object=}` -
             */
            "getMembersChart": {
              url: urlBase + "/Members/getMembersChart",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#sendPassword
             * @methodOf lbServices.Member
             *
             * @description
             *
             * send password to member
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "sendPassword": {
              url: urlBase + "/Members/sendPassword",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#recoverHotspotUser
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `usernameOrMobile` – `{string}` -
             *
             *  - `host` – `{string=}` -
             *
             *  - `nasId` – `{string=}` -
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "recoverHotspotUser": {
              url: urlBase + "/Members/recoverHotspotUser",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#loadMember
             * @methodOf lbServices.Member
             *
             * @description
             *
             * load member
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `memberId` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "loadMember": {
              url: urlBase + "/Members/loadMember",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#loadMemberPassword
             * @methodOf lbServices.Member
             *
             * @description
             *
             * load member's password
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `memberId` – `{string}` -
             *
             *  - `businessId` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "loadMemberPassword": {
              url: urlBase + "/Members/loadMemberPassword",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#loadMemberInternetPlans
             * @methodOf lbServices.Member
             *
             * @description
             *
             * load member's internetPlan history
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "loadMemberInternetPlans": {
              url: urlBase + "/Members/loadMemberInternetPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#createNewMember
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object}` -
             *
             *  - `businessId` – `{string}` -
             *
             *  - `nasId` – `{string=}` -
             *
             *  - `host` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "createNewMember": {
              url: urlBase + "/Members/createNewMember",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#createHotSpotMember
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `mobile` – `{string=}` -
             *
             *  - `firstName` – `{string=}` -
             *
             *  - `lastName` – `{string=}` -
             *
             *  - `fullName` – `{string=}` -
             *
             *  - `gender` – `{string=}` -
             *
             *  - `birthday` – `{number=}` -
             *
             *  - `birthDay` – `{number=}` -
             *
             *  - `birthMonth` – `{number=}` -
             *
             *  - `birthYear` – `{number=}` -
             *
             *  - `username` – `{string=}` -
             *
             *  - `password` – `{string=}` -
             *
             *  - `email` – `{string=}` -
             *
             *  - `nationalCode` – `{string=}` -
             *
             *  - `age` – `{number=}` -
             *
             *  - `id` – `{string}` -
             *
             *  - `host` – `{string}` -
             *
             *  - `nasId` – `{string}` -
             *
             *  - `language` – `{string=}` -
             *
             *  - `roomNumber` – `{string=}` -
             *
             *  - `passportNumber` – `{string=}` -
             *
             *  - `studentGrade` – `{string=}` -
             *
             *  - `studentId` – `{string=}` -
             *
             *  - `verificationMethod` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "createHotSpotMember": {
              url: urlBase + "/Members/createHotSpotMember",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#verifyHotSpot
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Verify mobile number
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `verificationCode` – `{string}` -
             *
             *  - `host` – `{string=}` -
             *
             *  - `nasId` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "verifyHotSpot": {
              url: urlBase + "/Members/verifyHotSpot",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#paySubscription
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `packageId` – `{string}` -
             *
             *  - `nasId` – `{string}` -
             *
             *  - `host` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             *  - `password` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "paySubscription": {
              url: urlBase + "/Members/paySubscription",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getSmsCostForAllMembers
             * @methodOf lbServices.Member
             *
             * @description
             *
             * get Sms cost for all members with mobile number
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `messageText` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getSmsCostForAllMembers": {
              url: urlBase + "/Members/getSmsCostForAllMembers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#sendMessageToAll
             * @methodOf lbServices.Member
             *
             * @description
             *
             * send message to all members with mobile number
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `messageText` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "sendMessageToAll": {
              url: urlBase + "/Members/sendMessageToAll",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#loadMemberUsage
             * @methodOf lbServices.Member
             *
             * @description
             *
             * loadMemberUsage returns members traffic
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `members` – `{*}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "loadMemberUsage": {
              url: urlBase + "/Members/loadMemberUsage",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getMemberBalance
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Calculate Member Internet Plan Balance
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getMemberBalance": {
              url: urlBase + "/Members/getMemberBalance",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#logOutHotSpot
             * @methodOf lbServices.Member
             *
             * @description
             *
             * LogOut Hotspot Member
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "logOutHotSpot": {
              url: urlBase + "/Members/logOutHotSpot",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getBusinessId
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find Business Id from Member User Name And Business Url Prefix
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessUrl` – `{string}` -
             *
             *  - `username` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getBusinessId": {
              url: urlBase + "/Members/getBusinessId",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getDailyUsage
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Find Internet Usage of a Member Base on Daily Interval
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `startDate` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getDailyUsage": {
              url: urlBase + "/Members/getDailyUsage",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#buyPlan
             * @methodOf lbServices.Member
             *
             * @description
             *
             * InternetPlan Payment By Member
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `internetPlanId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "buyPlan": {
              url: urlBase + "/Members/buyPlan",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#buyBulk
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Extra Bulk Payment By Member
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `internetPlanId` – `{string}` -
             *
             *  - `amount` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "buyBulk": {
              url: urlBase + "/Members/buyBulk",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#checkDefaultPlan
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `memberId` – `{string}` -
             *
             *  - `planId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "checkDefaultPlan": {
              url: urlBase + "/Members/checkDefaultPlan",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getAllMembersCount
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Get All Member Count of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `departmentId` – `{string=}` -
             *
             *  - `fromDate` – `{number=}` -
             *
             *  - `endDate` – `{number}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getAllMembersCount": {
              url: urlBase + "/Members/getAllMembersCount",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#importMemberFromCsv
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `csvString` – `{string}` -
             *
             *  - `internetPlanId` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "importMemberFromCsv": {
              url: urlBase + "/Members/importMemberFromCsv",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getNewMembersCount
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Get New Member Count of Business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `departmentId` – `{string}` -
             *
             *  - `fromDate` – `{number}` -
             *
             *  - `endDate` – `{number}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "getNewMembersCount": {
              url: urlBase + "/Members/getNewMembersCount",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#loadProfile
             * @methodOf lbServices.Member
             *
             * @description
             *
             * load profile status by mac
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `nasId` – `{string}` -
             *
             *  - `mac` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "loadProfile": {
              url: urlBase + "/Members/loadProfile",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#createMembersByGroup
             * @methodOf lbServices.Member
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `reserveCode` – `{string=}` -
             *
             *  - `tourCode` – `{string=}` -
             *
             *  - `mobile` – `{string=}` -
             *
             *  - `passportNumber` – `{string=}` -
             *
             *  - `nationalCode` – `{string=}` -
             *
             *  - `count` – `{number}` -
             *
             *  - `internetPlanId` – `{string}` -
             *
             *  - `duration` – `{number=}` -
             *
             *  - `helpLanguageCode` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "createMembersByGroup": {
              url: urlBase + "/Members/createMembersByGroup",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#createMany
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Members",
              method: "POST",
            },

            // INTERNAL. Use Business.members.findById() instead.
            "::findById::Business::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.members.destroyById() instead.
            "::destroyById::Business::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.members.updateById() instead.
            "::updateById::Business::members": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/members/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.members() instead.
            "::get::Business::members": {
              isArray: true,
              url: urlBase + "/Businesses/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Business.members.create() instead.
            "::create::Business::members": {
              url: urlBase + "/Businesses/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Business.members.createMany() instead.
            "::createMany::Business::members": {
              isArray: true,
              url: urlBase + "/Businesses/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Business.members.destroyAll() instead.
            "::delete::Business::members": {
              url: urlBase + "/Businesses/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Business.members.count() instead.
            "::count::Business::members": {
              url: urlBase + "/Businesses/:id/members/count",
              method: "GET",
            },

            // INTERNAL. Use Invoice.members() instead.
            "::get::Invoice::members": {
              url: urlBase + "/Invoices/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Invoice.members.create() instead.
            "::create::Invoice::members": {
              url: urlBase + "/Invoices/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Invoice.members.createMany() instead.
            "::createMany::Invoice::members": {
              isArray: true,
              url: urlBase + "/Invoices/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Invoice.members.update() instead.
            "::update::Invoice::members": {
              url: urlBase + "/Invoices/:id/members",
              method: "PUT",
            },

            // INTERNAL. Use Invoice.members.destroy() instead.
            "::destroy::Invoice::members": {
              url: urlBase + "/Invoices/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use ClientSession.members() instead.
            "::get::ClientSession::members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "GET",
            },

            // INTERNAL. Use ClientSession.members.create() instead.
            "::create::ClientSession::members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "POST",
            },

            // INTERNAL. Use ClientSession.members.createMany() instead.
            "::createMany::ClientSession::members": {
              isArray: true,
              url: urlBase + "/ClientSessions/:id/members",
              method: "POST",
            },

            // INTERNAL. Use ClientSession.members.update() instead.
            "::update::ClientSession::members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "PUT",
            },

            // INTERNAL. Use ClientSession.members.destroy() instead.
            "::destroy::ClientSession::members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Report.member() instead.
            "::get::Report::member": {
              url: urlBase + "/Reports/:id/member",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Member#getCurrent
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Members" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Member#upsert
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Member#updateOrCreate
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Member#patchOrCreateWithWhere
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Member#update
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Member#destroyById
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Member#removeById
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Member#prototype$updateAttributes
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Member#getCachedCurrent
         * @methodOf lbServices.Member
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Member#login} or
         * {@link lbServices.Member#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Member instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Member#isAuthenticated
         * @methodOf lbServices.Member
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Member#getCurrentId
         * @methodOf lbServices.Member
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Member#modelName
        * @propertyOf lbServices.Member
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Member`.
        */
        R.modelName = "Member";


            /**
             * @ngdoc method
             * @name lbServices.Member#business
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Member::business"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Member.invoices
     * @header lbServices.Member.invoices
     * @object
     * @description
     *
     * The object `Member.invoices` groups methods
     * manipulating `Invoice` instances related to `Member`.
     *
     * Call {@link lbServices.Member#invoices Member.invoices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Member#invoices
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Queries invoices of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::get::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#count
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Counts invoices of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.invoices.count = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::count::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#create
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.create = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::create::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#createMany
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.createMany = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::createMany::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#destroyAll
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Deletes all invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyAll = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::delete::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#destroyById
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Delete a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::destroyById::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#findById
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Find a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.findById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::findById::Member::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.invoices#updateById
             * @methodOf lbServices.Member.invoices
             *
             * @description
             *
             * Update a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.updateById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::updateById::Member::invoices"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Member.reports
     * @header lbServices.Member.reports
     * @object
     * @description
     *
     * The object `Member.reports` groups methods
     * manipulating `Report` instances related to `Member`.
     *
     * Call {@link lbServices.Member#reports Member.reports()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Member#reports
             * @methodOf lbServices.Member
             *
             * @description
             *
             * Queries reports of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::get::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#count
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Counts reports of Member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.reports.count = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::count::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#create
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.create = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::create::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#createMany
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.createMany = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::createMany::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#destroyAll
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Deletes all reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyAll = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::delete::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#destroyById
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Delete a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::destroyById::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#findById
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Find a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.findById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::findById::Member::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Member.reports#updateById
             * @methodOf lbServices.Member.reports
             *
             * @description
             *
             * Update a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Member id
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.updateById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::updateById::Member::reports"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.InternetPlan
 * @header lbServices.InternetPlan
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InternetPlan` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "InternetPlan",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/InternetPlans/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use InternetPlan.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/InternetPlans/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#create
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/InternetPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#patchOrCreate
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/InternetPlans",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#replaceOrCreate
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/InternetPlans/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#upsertWithWhere
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/InternetPlans/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#exists
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/InternetPlans/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#findById
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/InternetPlans/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#replaceById
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/InternetPlans/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#find
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/InternetPlans",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#findOne
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/InternetPlans/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#updateAll
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/InternetPlans/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#deleteById
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/InternetPlans/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#count
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/InternetPlans/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#prototype$patchAttributes
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - InternetPlan id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/InternetPlans/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#createChangeStream
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/InternetPlans/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#assignPlanToMember
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `memberId` – `{string}` -
             *
             *  - `planId` – `{string}` -
             *
             *  - `isFree` – `{boolean=}` -
             *
             *  - `byBusiness` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "assignPlanToMember": {
              url: urlBase + "/InternetPlans/assignPlanToMember",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#assignFreePlanToMember
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `memberId` – `{string}` -
             *
             *  - `planId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "assignFreePlanToMember": {
              url: urlBase + "/InternetPlans/assignFreePlanToMember",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#getPublicInternetPlans
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "getPublicInternetPlans": {
              url: urlBase + "/InternetPlans/getPublicInternetPlans",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#createMany
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/InternetPlans",
              method: "POST",
            },

            // INTERNAL. Use Business.internetPlans.findById() instead.
            "::findById::Business::internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.internetPlans.destroyById() instead.
            "::destroyById::Business::internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.internetPlans.updateById() instead.
            "::updateById::Business::internetPlans": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/internetPlans/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.internetPlans() instead.
            "::get::Business::internetPlans": {
              isArray: true,
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "GET",
            },

            // INTERNAL. Use Business.internetPlans.create() instead.
            "::create::Business::internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "POST",
            },

            // INTERNAL. Use Business.internetPlans.createMany() instead.
            "::createMany::Business::internetPlans": {
              isArray: true,
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "POST",
            },

            // INTERNAL. Use Business.internetPlans.destroyAll() instead.
            "::delete::Business::internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans",
              method: "DELETE",
            },

            // INTERNAL. Use Business.internetPlans.count() instead.
            "::count::Business::internetPlans": {
              url: urlBase + "/Businesses/:id/internetPlans/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#upsert
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#updateOrCreate
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#patchOrCreateWithWhere
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#update
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#destroyById
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#removeById
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#prototype$updateAttributes
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - InternetPlan id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `InternetPlan` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.InternetPlan#modelName
        * @propertyOf lbServices.InternetPlan
        * @description
        * The name of the model represented by this $resource,
        * i.e. `InternetPlan`.
        */
        R.modelName = "InternetPlan";


            /**
             * @ngdoc method
             * @name lbServices.InternetPlan#business
             * @methodOf lbServices.InternetPlan
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - InternetPlan id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::InternetPlan::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Invoice
 * @header lbServices.Invoice
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Invoice` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Invoice",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Invoices/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Invoice.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Invoices/:id/business",
              method: "GET",
            },

            // INTERNAL. Use Invoice.members() instead.
            "prototype$__get__members": {
              url: urlBase + "/Invoices/:id/members",
              method: "GET",
            },

            // INTERNAL. Use Invoice.members.create() instead.
            "prototype$__create__members": {
              url: urlBase + "/Invoices/:id/members",
              method: "POST",
            },

            // INTERNAL. Use Invoice.members.update() instead.
            "prototype$__update__members": {
              url: urlBase + "/Invoices/:id/members",
              method: "PUT",
            },

            // INTERNAL. Use Invoice.members.destroy() instead.
            "prototype$__destroy__members": {
              url: urlBase + "/Invoices/:id/members",
              method: "DELETE",
            },

            // INTERNAL. Use Invoice.reseller() instead.
            "prototype$__get__reseller": {
              url: urlBase + "/Invoices/:id/reseller",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#create
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Invoices",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#patchOrCreate
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Invoices",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#replaceOrCreate
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Invoices/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#upsertWithWhere
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Invoices/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#exists
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Invoices/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#findById
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Invoices/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#replaceById
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Invoices/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#find
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Invoices",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#findOne
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Invoices/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#updateAll
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Invoices/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#deleteById
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Invoices/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#count
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Invoices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#prototype$patchAttributes
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Invoices/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#createChangeStream
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Invoices/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#issueExternalInvoiceAndOpenPayment
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `price` – `{number}` -
             *
             *  - `uniqueId` – `{string}` -
             *
             *  - `invoiceType` – `{string}` -
             *
             *  - `returnUrl` – `{string}` -
             *
             *  - `serviceInfo` – `{object}` -
             *
             *  - `discountCoupon` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "issueExternalInvoiceAndOpenPayment": {
              url: urlBase + "/Invoices/issueExternalInvoiceAndOpenPayment",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#verifyExternalInvoice
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `invoiceId` – `{string}` -
             *
             *  - `refId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "verifyExternalInvoice": {
              url: urlBase + "/Invoices/verifyExternalInvoice",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Invoice#createMany
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Invoices",
              method: "POST",
            },

            // INTERNAL. Use Business.invoices.findById() instead.
            "::findById::Business::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.invoices.destroyById() instead.
            "::destroyById::Business::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.invoices.updateById() instead.
            "::updateById::Business::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.invoices() instead.
            "::get::Business::invoices": {
              isArray: true,
              url: urlBase + "/Businesses/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Business.invoices.create() instead.
            "::create::Business::invoices": {
              url: urlBase + "/Businesses/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Business.invoices.createMany() instead.
            "::createMany::Business::invoices": {
              isArray: true,
              url: urlBase + "/Businesses/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Business.invoices.destroyAll() instead.
            "::delete::Business::invoices": {
              url: urlBase + "/Businesses/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Business.invoices.count() instead.
            "::count::Business::invoices": {
              url: urlBase + "/Businesses/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.findById() instead.
            "::findById::Member::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.destroyById() instead.
            "::destroyById::Member::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Member.invoices.updateById() instead.
            "::updateById::Member::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Member.invoices() instead.
            "::get::Member::invoices": {
              isArray: true,
              url: urlBase + "/Members/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Member.invoices.create() instead.
            "::create::Member::invoices": {
              url: urlBase + "/Members/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Member.invoices.createMany() instead.
            "::createMany::Member::invoices": {
              isArray: true,
              url: urlBase + "/Members/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Member.invoices.destroyAll() instead.
            "::delete::Member::invoices": {
              url: urlBase + "/Members/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Member.invoices.count() instead.
            "::count::Member::invoices": {
              url: urlBase + "/Members/:id/invoices/count",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices.findById() instead.
            "::findById::Reseller::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices.destroyById() instead.
            "::destroyById::Reseller::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.invoices.updateById() instead.
            "::updateById::Reseller::invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Reseller.invoices() instead.
            "::get::Reseller::invoices": {
              isArray: true,
              url: urlBase + "/Resellers/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices.create() instead.
            "::create::Reseller::invoices": {
              url: urlBase + "/Resellers/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Reseller.invoices.createMany() instead.
            "::createMany::Reseller::invoices": {
              isArray: true,
              url: urlBase + "/Resellers/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Reseller.invoices.destroyAll() instead.
            "::delete::Reseller::invoices": {
              url: urlBase + "/Resellers/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.invoices.count() instead.
            "::count::Reseller::invoices": {
              url: urlBase + "/Resellers/:id/invoices/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Invoice#upsert
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#updateOrCreate
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#patchOrCreateWithWhere
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#update
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#destroyById
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#removeById
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Invoice#prototype$updateAttributes
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Invoice#modelName
        * @propertyOf lbServices.Invoice
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Invoice`.
        */
        R.modelName = "Invoice";


            /**
             * @ngdoc method
             * @name lbServices.Invoice#business
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Invoice::business"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Invoice.members
     * @header lbServices.Invoice.members
     * @object
     * @description
     *
     * The object `Invoice.members` groups methods
     * manipulating `Member` instances related to `Invoice`.
     *
     * Call {@link lbServices.Invoice#members Invoice.members()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Invoice#members
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Fetches hasOne relation members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::get::Invoice::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Invoice.members#create
             * @methodOf lbServices.Invoice.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.create = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::create::Invoice::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Invoice.members#createMany
             * @methodOf lbServices.Invoice.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.createMany = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::createMany::Invoice::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Invoice.members#destroy
             * @methodOf lbServices.Invoice.members
             *
             * @description
             *
             * Deletes members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroy = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::destroy::Invoice::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Invoice.members#update
             * @methodOf lbServices.Invoice.members
             *
             * @description
             *
             * Update members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.update = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::update::Invoice::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Invoice#reseller
             * @methodOf lbServices.Invoice
             *
             * @description
             *
             * Fetches belongsTo relation reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Invoice id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R.reseller = function() {
          var TargetResource = $injector.get("Reseller");
          var action = TargetResource["::get::Invoice::reseller"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Charge
 * @header lbServices.Charge
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Charge` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Charge",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Charges/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Charge#create
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Charges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#patchOrCreate
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Charges",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#replaceOrCreate
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Charges/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#upsertWithWhere
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Charges/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#exists
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Charges/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#findById
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Charges/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#replaceById
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Charges/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#find
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Charges",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#findOne
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Charges/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#updateAll
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Charges/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#deleteById
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Charges/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#count
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Charges/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#prototype$patchAttributes
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Charge id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Charges/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#createChangeStream
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Charges/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#loadCharges
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * get charges of a business between two dates, skip and limit
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `startDate` – `{number}` -
             *
             *  - `skip` – `{number}` -
             *
             *  - `limit` – `{number}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "loadCharges": {
              url: urlBase + "/Charges/loadCharges",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Charge#createMany
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Charges",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Charge#upsert
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#updateOrCreate
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#patchOrCreateWithWhere
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#update
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#destroyById
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#removeById
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Charge#prototype$updateAttributes
             * @methodOf lbServices.Charge
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Charge id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Charge` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Charge#modelName
        * @propertyOf lbServices.Charge
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Charge`.
        */
        R.modelName = "Charge";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ClientSession
 * @header lbServices.ClientSession
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ClientSession` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ClientSession",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ClientSessions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ClientSession.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/ClientSessions/:id/business",
              method: "GET",
            },

            // INTERNAL. Use ClientSession.members() instead.
            "prototype$__get__members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "GET",
            },

            // INTERNAL. Use ClientSession.members.create() instead.
            "prototype$__create__members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "POST",
            },

            // INTERNAL. Use ClientSession.members.update() instead.
            "prototype$__update__members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "PUT",
            },

            // INTERNAL. Use ClientSession.members.destroy() instead.
            "prototype$__destroy__members": {
              url: urlBase + "/ClientSessions/:id/members",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#create
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ClientSessions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#patchOrCreate
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ClientSessions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#replaceOrCreate
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ClientSessions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#upsertWithWhere
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ClientSessions/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#exists
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ClientSessions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#findById
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ClientSessions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#replaceById
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ClientSessions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#find
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ClientSessions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#findOne
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ClientSessions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#updateAll
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ClientSessions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#deleteById
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ClientSessions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#count
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ClientSessions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#prototype$patchAttributes
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ClientSessions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#createChangeStream
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ClientSessions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#getOnlineUsers
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Get Online Users Report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `startDate` – `{number=}` -
             *
             *  - `endDate` – `{number=}` -
             *
             *  - `businessId` – `{string}` -
             *
             *  - `departmentId` – `{string=}` -
             *
             *  - `skip` – `{number=}` -
             *
             *  - `limit` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{Object=}` -
             */
            "getOnlineUsers": {
              url: urlBase + "/ClientSessions/getOnlineUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#getOnlineSessionCount
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Get Online Sessions Count.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `departmentId` – `{string=}` -
             *
             *  - `startDate` – `{number=}` -
             *
             *  - `endDate` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "getOnlineSessionCount": {
              url: urlBase + "/ClientSessions/getOnlineSessionCount",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#killOnlineSession
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Kill Online Session
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `session` – `{object}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "killOnlineSession": {
              url: urlBase + "/ClientSessions/killOnlineSession",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#createMany
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ClientSessions",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ClientSession#upsert
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#updateOrCreate
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#patchOrCreateWithWhere
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#update
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#destroyById
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#removeById
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ClientSession#prototype$updateAttributes
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ClientSession` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ClientSession#modelName
        * @propertyOf lbServices.ClientSession
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ClientSession`.
        */
        R.modelName = "ClientSession";


            /**
             * @ngdoc method
             * @name lbServices.ClientSession#business
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::ClientSession::business"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.ClientSession.members
     * @header lbServices.ClientSession.members
     * @object
     * @description
     *
     * The object `ClientSession.members` groups methods
     * manipulating `Member` instances related to `ClientSession`.
     *
     * Call {@link lbServices.ClientSession#members ClientSession.members()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ClientSession#members
             * @methodOf lbServices.ClientSession
             *
             * @description
             *
             * Fetches hasOne relation members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::get::ClientSession::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClientSession.members#create
             * @methodOf lbServices.ClientSession.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.create = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::create::ClientSession::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClientSession.members#createMany
             * @methodOf lbServices.ClientSession.members
             *
             * @description
             *
             * Creates a new instance in members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.createMany = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::createMany::ClientSession::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClientSession.members#destroy
             * @methodOf lbServices.ClientSession.members
             *
             * @description
             *
             * Deletes members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.members.destroy = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::destroy::ClientSession::members"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ClientSession.members#update
             * @methodOf lbServices.ClientSession.members
             *
             * @description
             *
             * Update members of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ClientSession id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.members.update = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::update::ClientSession::members"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FileStorage
 * @header lbServices.FileStorage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FileStorage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FileStorage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FileStorages/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FileStorage.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/FileStorages/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#create
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FileStorages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#patchOrCreate
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FileStorages",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#replaceOrCreate
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FileStorages/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#upsertWithWhere
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FileStorages/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#exists
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FileStorages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#findById
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FileStorages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#replaceById
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FileStorages/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#find
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FileStorages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#findOne
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FileStorages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#updateAll
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FileStorages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#deleteById
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FileStorages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#count
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FileStorages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#prototype$patchAttributes
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FileStorage id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FileStorages/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#createChangeStream
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FileStorages/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#getFilesByBusinessId
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Get Files Uploaded From Data Source Base on BusinessId.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `fileType` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{*=}` -
             */
            "getFilesByBusinessId": {
              url: urlBase + "/FileStorages/getFilesByBusinessId",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#createMany
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FileStorages",
              method: "POST",
            },

            // INTERNAL. Use Business.fileStorages.findById() instead.
            "::findById::Business::fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.fileStorages.destroyById() instead.
            "::destroyById::Business::fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.fileStorages.updateById() instead.
            "::updateById::Business::fileStorages": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/fileStorages/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.fileStorages() instead.
            "::get::Business::fileStorages": {
              isArray: true,
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "GET",
            },

            // INTERNAL. Use Business.fileStorages.create() instead.
            "::create::Business::fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "POST",
            },

            // INTERNAL. Use Business.fileStorages.createMany() instead.
            "::createMany::Business::fileStorages": {
              isArray: true,
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "POST",
            },

            // INTERNAL. Use Business.fileStorages.destroyAll() instead.
            "::delete::Business::fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages",
              method: "DELETE",
            },

            // INTERNAL. Use Business.fileStorages.count() instead.
            "::count::Business::fileStorages": {
              url: urlBase + "/Businesses/:id/fileStorages/count",
              method: "GET",
            },

            // INTERNAL. Use Report.fileStorage() instead.
            "::get::Report::fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "GET",
            },

            // INTERNAL. Use Report.fileStorage.create() instead.
            "::create::Report::fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "POST",
            },

            // INTERNAL. Use Report.fileStorage.createMany() instead.
            "::createMany::Report::fileStorage": {
              isArray: true,
              url: urlBase + "/Reports/:id/fileStorage",
              method: "POST",
            },

            // INTERNAL. Use Report.fileStorage.update() instead.
            "::update::Report::fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "PUT",
            },

            // INTERNAL. Use Report.fileStorage.destroy() instead.
            "::destroy::Report::fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FileStorage#upsert
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#updateOrCreate
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#patchOrCreateWithWhere
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#update
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#destroyById
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#removeById
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FileStorage#prototype$updateAttributes
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FileStorage id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FileStorage#modelName
        * @propertyOf lbServices.FileStorage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FileStorage`.
        */
        R.modelName = "FileStorage";


            /**
             * @ngdoc method
             * @name lbServices.FileStorage#business
             * @methodOf lbServices.FileStorage
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FileStorage id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::FileStorage::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Theme
 * @header lbServices.Theme
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Theme` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Theme",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Themes/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Theme#create
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Themes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#patchOrCreate
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Themes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#replaceOrCreate
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Themes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#upsertWithWhere
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Themes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#exists
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Themes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#findById
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Themes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#replaceById
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Themes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#find
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Themes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#findOne
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Themes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#updateAll
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Themes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#deleteById
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Themes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#count
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Themes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#prototype$patchAttributes
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Theme id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Themes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#createChangeStream
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Themes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#loadHotspotThemes
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Load hotspot themes
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "loadHotspotThemes": {
              url: urlBase + "/Themes/loadHotspotThemes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Theme#createMany
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Themes",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Theme#upsert
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#updateOrCreate
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#patchOrCreateWithWhere
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#update
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#destroyById
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#removeById
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Theme#prototype$updateAttributes
             * @methodOf lbServices.Theme
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Theme id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Theme` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Theme#modelName
        * @propertyOf lbServices.Theme
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Theme`.
        */
        R.modelName = "Theme";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Reseller
 * @header lbServices.Reseller
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Reseller` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Reseller",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Resellers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__findById__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__updateById__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Reseller.businesses.findById() instead.
            "prototype$__findById__businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses.destroyById() instead.
            "prototype$__destroyById__businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.businesses.updateById() instead.
            "prototype$__updateById__businesses": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/businesses/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Reseller.invoices.findById() instead.
            "prototype$__findById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices.destroyById() instead.
            "prototype$__destroyById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.invoices.updateById() instead.
            "prototype$__updateById__invoices": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Resellers/:id/invoices/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__get__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Queries accessTokens of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Resellers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__create__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Resellers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__delete__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Resellers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$__count__accessTokens
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Counts accessTokens of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Resellers/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses() instead.
            "prototype$__get__businesses": {
              isArray: true,
              url: urlBase + "/Resellers/:id/businesses",
              method: "GET",
            },

            // INTERNAL. Use Reseller.businesses.create() instead.
            "prototype$__create__businesses": {
              url: urlBase + "/Resellers/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Reseller.businesses.destroyAll() instead.
            "prototype$__delete__businesses": {
              url: urlBase + "/Resellers/:id/businesses",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.businesses.count() instead.
            "prototype$__count__businesses": {
              url: urlBase + "/Resellers/:id/businesses/count",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices() instead.
            "prototype$__get__invoices": {
              isArray: true,
              url: urlBase + "/Resellers/:id/invoices",
              method: "GET",
            },

            // INTERNAL. Use Reseller.invoices.create() instead.
            "prototype$__create__invoices": {
              url: urlBase + "/Resellers/:id/invoices",
              method: "POST",
            },

            // INTERNAL. Use Reseller.invoices.destroyAll() instead.
            "prototype$__delete__invoices": {
              url: urlBase + "/Resellers/:id/invoices",
              method: "DELETE",
            },

            // INTERNAL. Use Reseller.invoices.count() instead.
            "prototype$__count__invoices": {
              url: urlBase + "/Resellers/:id/invoices/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#create
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Resellers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#patchOrCreate
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Resellers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#replaceOrCreate
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Resellers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#upsertWithWhere
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Resellers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#exists
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Resellers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#findById
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Resellers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#replaceById
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Resellers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#find
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Resellers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#findOne
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Resellers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#updateAll
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Resellers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#deleteById
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Resellers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#count
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Resellers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$patchAttributes
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Resellers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#createChangeStream
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Resellers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#login
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Resellers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#logout
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Resellers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$verify
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Resellers/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#confirm
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Resellers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#resetPassword
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Resellers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#changePassword
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Resellers/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#setPassword
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Resellers/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#getBalance
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Load business list
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `resellerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "getBalance": {
              url: urlBase + "/Resellers/getBalance",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#loadBusiness
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Load business list
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "loadBusiness": {
              url: urlBase + "/Resellers/loadBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#createBusiness
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * create business by reseller
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `business` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "createBusiness": {
              url: urlBase + "/Resellers/createBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#assignBusinessToReseller
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * assign business to reseller
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `businessId` – `{string}` -
             *
             *  - `resellerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "assignBusinessToReseller": {
              url: urlBase + "/Resellers/assignBusinessToReseller",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#findBusiness
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Find business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `resellerId` – `{string}` -
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "findBusiness": {
              url: urlBase + "/Resellers/findBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#updateBusiness
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `business` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "updateBusiness": {
              url: urlBase + "/Resellers/updateBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#removeBusiness
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Remove business
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `resellerId` – `{string}` -
             *
             *  - `businessId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "removeBusiness": {
              url: urlBase + "/Resellers/removeBusiness",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#countResellersActiveUsers
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `resellerId` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "countResellersActiveUsers": {
              url: urlBase + "/Resellers/countResellersActiveUsers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#createMany
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Resellers",
              method: "POST",
            },

            // INTERNAL. Use Business.resellers() instead.
            "::get::Business::resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "GET",
            },

            // INTERNAL. Use Business.resellers.create() instead.
            "::create::Business::resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "POST",
            },

            // INTERNAL. Use Business.resellers.createMany() instead.
            "::createMany::Business::resellers": {
              isArray: true,
              url: urlBase + "/Businesses/:id/resellers",
              method: "POST",
            },

            // INTERNAL. Use Business.resellers.update() instead.
            "::update::Business::resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "PUT",
            },

            // INTERNAL. Use Business.resellers.destroy() instead.
            "::destroy::Business::resellers": {
              url: urlBase + "/Businesses/:id/resellers",
              method: "DELETE",
            },

            // INTERNAL. Use Invoice.reseller() instead.
            "::get::Invoice::reseller": {
              url: urlBase + "/Invoices/:id/reseller",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Reseller#getCurrent
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Resellers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Reseller#upsert
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#updateOrCreate
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#patchOrCreateWithWhere
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#update
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#destroyById
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#removeById
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Reseller#prototype$updateAttributes
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Reseller` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Reseller#getCachedCurrent
         * @methodOf lbServices.Reseller
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Reseller#login} or
         * {@link lbServices.Reseller#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Reseller instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Reseller#isAuthenticated
         * @methodOf lbServices.Reseller
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Reseller#getCurrentId
         * @methodOf lbServices.Reseller
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Reseller#modelName
        * @propertyOf lbServices.Reseller
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Reseller`.
        */
        R.modelName = "Reseller";

    /**
     * @ngdoc object
     * @name lbServices.Reseller.businesses
     * @header lbServices.Reseller.businesses
     * @object
     * @description
     *
     * The object `Reseller.businesses` groups methods
     * manipulating `Business` instances related to `Reseller`.
     *
     * Call {@link lbServices.Reseller#businesses Reseller.businesses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Reseller#businesses
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Queries businesses of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#count
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Counts businesses of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.businesses.count = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::count::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#create
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Creates a new instance in businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.create = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::create::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#createMany
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Creates a new instance in businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.createMany = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::createMany::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#destroyAll
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Deletes all businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.businesses.destroyAll = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::delete::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#destroyById
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Delete a related item by id for businesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for businesses
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.businesses.destroyById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::destroyById::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#findById
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Find a related item by id for businesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for businesses
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.findById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::findById::Reseller::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.businesses#updateById
             * @methodOf lbServices.Reseller.businesses
             *
             * @description
             *
             * Update a related item by id for businesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `fk` – `{*}` - Foreign key for businesses
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.updateById = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::updateById::Reseller::businesses"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Reseller.invoices
     * @header lbServices.Reseller.invoices
     * @object
     * @description
     *
     * The object `Reseller.invoices` groups methods
     * manipulating `Invoice` instances related to `Reseller`.
     *
     * Call {@link lbServices.Reseller#invoices Reseller.invoices()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Reseller#invoices
             * @methodOf lbServices.Reseller
             *
             * @description
             *
             * Queries invoices of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::get::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#count
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Counts invoices of Reseller.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.invoices.count = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::count::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#create
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.create = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::create::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#createMany
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Creates a new instance in invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.createMany = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::createMany::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#destroyAll
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Deletes all invoices of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyAll = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::delete::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#destroyById
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Delete a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.invoices.destroyById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::destroyById::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#findById
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Find a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.findById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::findById::Reseller::invoices"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Reseller.invoices#updateById
             * @methodOf lbServices.Reseller.invoices
             *
             * @description
             *
             * Update a related item by id for invoices.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Reseller id
             *
             *  - `fk` – `{*}` - Foreign key for invoices
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Invoice` object.)
             * </em>
             */
        R.invoices.updateById = function() {
          var TargetResource = $injector.get("Invoice");
          var action = TargetResource["::updateById::Reseller::invoices"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Coupon
 * @header lbServices.Coupon
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Coupon` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Coupon",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Coupons/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Coupon.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Coupons/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#create
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Coupons",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#patchOrCreate
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Coupons",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#replaceOrCreate
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Coupons/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#upsertWithWhere
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Coupons/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#exists
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Coupons/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#findById
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Coupons/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#replaceById
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Coupons/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#find
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Coupons",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#findOne
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Coupons/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#updateAll
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Coupons/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#deleteById
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Coupons/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#count
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Coupons/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#prototype$patchAttributes
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Coupon id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Coupons/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#createChangeStream
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Coupons/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#verifyGiftCode
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `giftCode` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "verifyGiftCode": {
              url: urlBase + "/Coupons/verifyGiftCode",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Coupon#createMany
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Coupons",
              method: "POST",
            },

            // INTERNAL. Use Business.coupons.findById() instead.
            "::findById::Business::coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.coupons.destroyById() instead.
            "::destroyById::Business::coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.coupons.updateById() instead.
            "::updateById::Business::coupons": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/coupons/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.coupons() instead.
            "::get::Business::coupons": {
              isArray: true,
              url: urlBase + "/Businesses/:id/coupons",
              method: "GET",
            },

            // INTERNAL. Use Business.coupons.create() instead.
            "::create::Business::coupons": {
              url: urlBase + "/Businesses/:id/coupons",
              method: "POST",
            },

            // INTERNAL. Use Business.coupons.createMany() instead.
            "::createMany::Business::coupons": {
              isArray: true,
              url: urlBase + "/Businesses/:id/coupons",
              method: "POST",
            },

            // INTERNAL. Use Business.coupons.destroyAll() instead.
            "::delete::Business::coupons": {
              url: urlBase + "/Businesses/:id/coupons",
              method: "DELETE",
            },

            // INTERNAL. Use Business.coupons.count() instead.
            "::count::Business::coupons": {
              url: urlBase + "/Businesses/:id/coupons/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Coupon#upsert
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#updateOrCreate
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#patchOrCreateWithWhere
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#update
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#destroyById
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#removeById
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Coupon#prototype$updateAttributes
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Coupon id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Coupon` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Coupon#modelName
        * @propertyOf lbServices.Coupon
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Coupon`.
        */
        R.modelName = "Coupon";


            /**
             * @ngdoc method
             * @name lbServices.Coupon#business
             * @methodOf lbServices.Coupon
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Coupon id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Coupon::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Ticket
 * @header lbServices.Ticket
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Ticket` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Ticket",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Tickets/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Ticket.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Tickets/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#create
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Tickets",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#patchOrCreate
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Tickets",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#replaceOrCreate
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Tickets/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#upsertWithWhere
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Tickets/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#exists
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Tickets/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#findById
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Tickets/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#replaceById
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Tickets/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#find
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Tickets",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#findOne
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Tickets/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#updateAll
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Tickets/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#deleteById
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Tickets/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#count
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Tickets/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#prototype$patchAttributes
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Ticket id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Tickets/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#createChangeStream
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Tickets/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#replyToTicket
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ticketId` – `{string}` -
             *
             *  - `message` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "replyToTicket": {
              url: urlBase + "/Tickets/replyToTicket",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Ticket#createMany
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Tickets",
              method: "POST",
            },

            // INTERNAL. Use Business.tickets.findById() instead.
            "::findById::Business::tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.tickets.destroyById() instead.
            "::destroyById::Business::tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.tickets.updateById() instead.
            "::updateById::Business::tickets": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/tickets/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.tickets() instead.
            "::get::Business::tickets": {
              isArray: true,
              url: urlBase + "/Businesses/:id/tickets",
              method: "GET",
            },

            // INTERNAL. Use Business.tickets.create() instead.
            "::create::Business::tickets": {
              url: urlBase + "/Businesses/:id/tickets",
              method: "POST",
            },

            // INTERNAL. Use Business.tickets.createMany() instead.
            "::createMany::Business::tickets": {
              isArray: true,
              url: urlBase + "/Businesses/:id/tickets",
              method: "POST",
            },

            // INTERNAL. Use Business.tickets.destroyAll() instead.
            "::delete::Business::tickets": {
              url: urlBase + "/Businesses/:id/tickets",
              method: "DELETE",
            },

            // INTERNAL. Use Business.tickets.count() instead.
            "::count::Business::tickets": {
              url: urlBase + "/Businesses/:id/tickets/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Ticket#upsert
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#updateOrCreate
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#patchOrCreateWithWhere
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#update
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#destroyById
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#removeById
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Ticket#prototype$updateAttributes
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Ticket id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Ticket` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Ticket#modelName
        * @propertyOf lbServices.Ticket
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Ticket`.
        */
        R.modelName = "Ticket";


            /**
             * @ngdoc method
             * @name lbServices.Ticket#business
             * @methodOf lbServices.Ticket
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Ticket id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Ticket::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Usage
 * @header lbServices.Usage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Usage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Usage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Usages/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Usage.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Usages/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#create
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Usages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#patchOrCreate
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Usages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#replaceOrCreate
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Usages/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#upsertWithWhere
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Usages/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#exists
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Usages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#findById
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Usages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#replaceById
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Usages/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#find
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Usages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#findOne
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Usages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#updateAll
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Usages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#deleteById
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Usages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#count
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Usages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#prototype$patchAttributes
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Usage id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Usages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#createChangeStream
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Usages/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#getUsage
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Get usage report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `departmentId` – `{string=}` - departmentId
             *
             *  - `startDate` – `{number}` - Start Date
             *
             *  - `endDate` – `{number}` - End Date
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "getUsage": {
              url: urlBase + "/Usages/getUsage",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#reportStatus
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Get report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "reportStatus": {
              url: urlBase + "/Usages/reportStatus",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#getTopMembers
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Get Top Members.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `departmentId` – `{string=}` - departmentId
             *
             *  - `startDate` – `{number}` - Start Date
             *
             *  - `endDate` – `{number}` - End Date
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "getTopMembers": {
              url: urlBase + "/Usages/getTopMembers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Usage#createMany
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Usages",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Usage#upsert
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#updateOrCreate
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#patchOrCreateWithWhere
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#update
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#destroyById
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#removeById
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Usage#prototype$updateAttributes
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Usage id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Usage` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Usage#modelName
        * @propertyOf lbServices.Usage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Usage`.
        */
        R.modelName = "Usage";


            /**
             * @ngdoc method
             * @name lbServices.Usage#business
             * @methodOf lbServices.Usage
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Usage id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Usage::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Report
 * @header lbServices.Report
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Report` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Report",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Reports/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Report.member() instead.
            "prototype$__get__member": {
              url: urlBase + "/Reports/:id/member",
              method: "GET",
            },

            // INTERNAL. Use Report.fileStorage() instead.
            "prototype$__get__fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "GET",
            },

            // INTERNAL. Use Report.fileStorage.create() instead.
            "prototype$__create__fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "POST",
            },

            // INTERNAL. Use Report.fileStorage.update() instead.
            "prototype$__update__fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "PUT",
            },

            // INTERNAL. Use Report.fileStorage.destroy() instead.
            "prototype$__destroy__fileStorage": {
              url: urlBase + "/Reports/:id/fileStorage",
              method: "DELETE",
            },

            // INTERNAL. Use Report.businesses() instead.
            "prototype$__get__businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "GET",
            },

            // INTERNAL. Use Report.businesses.create() instead.
            "prototype$__create__businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "POST",
            },

            // INTERNAL. Use Report.businesses.update() instead.
            "prototype$__update__businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "PUT",
            },

            // INTERNAL. Use Report.businesses.destroy() instead.
            "prototype$__destroy__businesses": {
              url: urlBase + "/Reports/:id/businesses",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#create
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Reports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#patchOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Reports",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#replaceOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Reports/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#upsertWithWhere
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Reports/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#exists
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Reports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#findById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Reports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#replaceById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Reports/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#find
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Reports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#findOne
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Reports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#updateAll
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Reports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#deleteById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Reports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#count
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Reports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#prototype$patchAttributes
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Reports/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#createChangeStream
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Reports/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#searchNetflow
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Search Netflow
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `report` – `{string}` -
             *
             *  - `type` – `{string=}` -
             *
             *  - `businessId` – `{string=}` -
             *
             *  - `departments` – `{string=}` -
             *
             *  - `from` – `{number=}` -
             *
             *  - `to` – `{number=}` -
             *
             *  - `username` – `{string=}` -
             *
             *  - `srcAddress` – `{string=}` -
             *
             *  - `srcPort` – `{string=}` -
             *
             *  - `dstAddress` – `{string=}` -
             *
             *  - `dstPort` – `{string=}` -
             *
             *  - `limit` – `{number=}` -
             *
             *  - `skip` – `{number=}` -
             *
             *  - `sort` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "searchNetflow": {
              url: urlBase + "/Reports/searchNetflow",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#searchDns
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Search Dns
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `report` – `{string}` -
             *
             *  - `type` – `{string=}` -
             *
             *  - `businessId` – `{string=}` -
             *
             *  - `departments` – `{string=}` -
             *
             *  - `from` – `{number=}` -
             *
             *  - `to` – `{number=}` -
             *
             *  - `username` – `{string=}` -
             *
             *  - `limit` – `{number=}` -
             *
             *  - `skip` – `{number=}` -
             *
             *  - `sort` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "searchDns": {
              url: urlBase + "/Reports/searchDns",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#searchWebProxy
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Search WebProxy
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `report` – `{string}` -
             *
             *  - `type` – `{string=}` -
             *
             *  - `businessId` – `{string=}` -
             *
             *  - `departments` – `{string=}` -
             *
             *  - `from` – `{number=}` -
             *
             *  - `to` – `{number=}` -
             *
             *  - `username` – `{string=}` -
             *
             *  - `limit` – `{number=}` -
             *
             *  - `skip` – `{number=}` -
             *
             *  - `sort` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "searchWebProxy": {
              url: urlBase + "/Reports/searchWebProxy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#createMany
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Reports",
              method: "POST",
            },

            // INTERNAL. Use Business.reports.findById() instead.
            "::findById::Business::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.reports.destroyById() instead.
            "::destroyById::Business::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.reports.updateById() instead.
            "::updateById::Business::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/reports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.reports() instead.
            "::get::Business::reports": {
              isArray: true,
              url: urlBase + "/Businesses/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Business.reports.create() instead.
            "::create::Business::reports": {
              url: urlBase + "/Businesses/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Business.reports.createMany() instead.
            "::createMany::Business::reports": {
              isArray: true,
              url: urlBase + "/Businesses/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Business.reports.destroyAll() instead.
            "::delete::Business::reports": {
              url: urlBase + "/Businesses/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Business.reports.count() instead.
            "::count::Business::reports": {
              url: urlBase + "/Businesses/:id/reports/count",
              method: "GET",
            },

            // INTERNAL. Use Member.reports.findById() instead.
            "::findById::Member::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Member.reports.destroyById() instead.
            "::destroyById::Member::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Member.reports.updateById() instead.
            "::updateById::Member::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Members/:id/reports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Member.reports() instead.
            "::get::Member::reports": {
              isArray: true,
              url: urlBase + "/Members/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Member.reports.create() instead.
            "::create::Member::reports": {
              url: urlBase + "/Members/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Member.reports.createMany() instead.
            "::createMany::Member::reports": {
              isArray: true,
              url: urlBase + "/Members/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Member.reports.destroyAll() instead.
            "::delete::Member::reports": {
              url: urlBase + "/Members/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Member.reports.count() instead.
            "::count::Member::reports": {
              url: urlBase + "/Members/:id/reports/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Report#upsert
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Report#updateOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Report#patchOrCreateWithWhere
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Report#update
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Report#destroyById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Report#removeById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Report#prototype$updateAttributes
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Report#modelName
        * @propertyOf lbServices.Report
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Report`.
        */
        R.modelName = "Report";


            /**
             * @ngdoc method
             * @name lbServices.Report#member
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation member.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Member` object.)
             * </em>
             */
        R.member = function() {
          var TargetResource = $injector.get("Member");
          var action = TargetResource["::get::Report::member"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Report.fileStorage
     * @header lbServices.Report.fileStorage
     * @object
     * @description
     *
     * The object `Report.fileStorage` groups methods
     * manipulating `FileStorage` instances related to `Report`.
     *
     * Call {@link lbServices.Report#fileStorage Report.fileStorage()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#fileStorage
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches hasOne relation fileStorage.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorage = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::get::Report::fileStorage"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.fileStorage#create
             * @methodOf lbServices.Report.fileStorage
             *
             * @description
             *
             * Creates a new instance in fileStorage of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorage.create = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::create::Report::fileStorage"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.fileStorage#createMany
             * @methodOf lbServices.Report.fileStorage
             *
             * @description
             *
             * Creates a new instance in fileStorage of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorage.createMany = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::createMany::Report::fileStorage"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.fileStorage#destroy
             * @methodOf lbServices.Report.fileStorage
             *
             * @description
             *
             * Deletes fileStorage of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.fileStorage.destroy = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::destroy::Report::fileStorage"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.fileStorage#update
             * @methodOf lbServices.Report.fileStorage
             *
             * @description
             *
             * Update fileStorage of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FileStorage` object.)
             * </em>
             */
        R.fileStorage.update = function() {
          var TargetResource = $injector.get("FileStorage");
          var action = TargetResource["::update::Report::fileStorage"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Report.businesses
     * @header lbServices.Report.businesses
     * @object
     * @description
     *
     * The object `Report.businesses` groups methods
     * manipulating `Business` instances related to `Report`.
     *
     * Call {@link lbServices.Report#businesses Report.businesses()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#businesses
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches hasOne relation businesses.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Report::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.businesses#create
             * @methodOf lbServices.Report.businesses
             *
             * @description
             *
             * Creates a new instance in businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.create = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::create::Report::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.businesses#createMany
             * @methodOf lbServices.Report.businesses
             *
             * @description
             *
             * Creates a new instance in businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.createMany = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::createMany::Report::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.businesses#destroy
             * @methodOf lbServices.Report.businesses
             *
             * @description
             *
             * Deletes businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.businesses.destroy = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::destroy::Report::businesses"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.businesses#update
             * @methodOf lbServices.Report.businesses
             *
             * @description
             *
             * Update businesses of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Report id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.businesses.update = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::update::Report::businesses"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.BigFile
 * @header lbServices.BigFile
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `BigFile` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "BigFile",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/BigFiles/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.BigFile#getContainers
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/BigFiles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#createContainer
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/BigFiles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#destroyContainer
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/BigFiles/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#getContainer
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/BigFiles/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#getFiles
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/BigFiles/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#getFile
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/BigFiles/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#removeFile
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/BigFiles/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#upload
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/BigFiles/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#download
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string}` -
             *
             *  - `file` – `{string}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/BigFiles/:container/download/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#create
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/BigFiles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#patchOrCreate
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/BigFiles",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#replaceOrCreate
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/BigFiles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#upsertWithWhere
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/BigFiles/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#exists
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/BigFiles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#findById
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/BigFiles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#replaceById
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/BigFiles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#find
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/BigFiles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#findOne
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/BigFiles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#updateAll
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/BigFiles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#deleteById
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/BigFiles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#count
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/BigFiles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#prototype$patchAttributes
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BigFile id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/BigFiles/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#createChangeStream
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/BigFiles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.BigFile#createMany
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/BigFiles",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.BigFile#upsert
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#updateOrCreate
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#patchOrCreateWithWhere
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#update
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#destroyById
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#removeById
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.BigFile#prototype$updateAttributes
             * @methodOf lbServices.BigFile
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - BigFile id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `BigFile` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.BigFile#modelName
        * @propertyOf lbServices.BigFile
        * @description
        * The name of the model represented by this $resource,
        * i.e. `BigFile`.
        */
        R.modelName = "BigFile";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Department
 * @header lbServices.Department
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Department` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Department",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Departments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Department.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Departments/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#create
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Departments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#patchOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Departments",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#replaceOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Departments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#upsertWithWhere
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Departments/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#exists
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Departments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Departments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#replaceById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Departments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#find
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findOne
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Departments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#updateAll
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Departments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#deleteById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Departments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#count
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Departments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#prototype$patchAttributes
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Department id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Departments/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createChangeStream
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Departments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createMany
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "POST",
            },

            // INTERNAL. Use Business.departments.findById() instead.
            "::findById::Business::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.departments.destroyById() instead.
            "::destroyById::Business::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.departments.updateById() instead.
            "::updateById::Business::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/departments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.departments() instead.
            "::get::Business::departments": {
              isArray: true,
              url: urlBase + "/Businesses/:id/departments",
              method: "GET",
            },

            // INTERNAL. Use Business.departments.create() instead.
            "::create::Business::departments": {
              url: urlBase + "/Businesses/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Business.departments.createMany() instead.
            "::createMany::Business::departments": {
              isArray: true,
              url: urlBase + "/Businesses/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Business.departments.destroyAll() instead.
            "::delete::Business::departments": {
              url: urlBase + "/Businesses/:id/departments",
              method: "DELETE",
            },

            // INTERNAL. Use Business.departments.count() instead.
            "::count::Business::departments": {
              url: urlBase + "/Businesses/:id/departments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Department#upsert
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Department#updateOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Department#patchOrCreateWithWhere
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Department#update
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Department#destroyById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Department#removeById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Department#prototype$updateAttributes
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Department id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Department#modelName
        * @propertyOf lbServices.Department
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Department`.
        */
        R.modelName = "Department";


            /**
             * @ngdoc method
             * @name lbServices.Department#business
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Department id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Department::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Operator
 * @header lbServices.Operator
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Operator` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Operator",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Operators/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__findById__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Operators/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Operators/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__updateById__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Operators/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Operator.business() instead.
            "prototype$__get__business": {
              url: urlBase + "/Operators/:id/business",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__get__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Queries accessTokens of Operator.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Operators/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__create__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Operators/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__delete__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Operators/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$__count__accessTokens
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Counts accessTokens of Operator.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Operators/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#create
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Operators",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#patchOrCreate
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Operators",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#replaceOrCreate
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Operators/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#upsertWithWhere
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Operators/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#exists
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Operators/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#findById
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Operators/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#replaceById
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Operators/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#find
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Operators",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#findOne
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Operators/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#updateAll
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Operators/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#deleteById
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Operators/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#count
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Operators/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$patchAttributes
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Operators/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#createChangeStream
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Operators/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#login
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Operators/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#logout
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Operators/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$verify
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Operators/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#confirm
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Operators/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#resetPassword
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Operators/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#changePassword
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Operators/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#setPassword
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Operators/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#createMany
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Operators",
              method: "POST",
            },

            // INTERNAL. Use Business.operators.findById() instead.
            "::findById::Business::operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "GET",
            },

            // INTERNAL. Use Business.operators.destroyById() instead.
            "::destroyById::Business::operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Business.operators.updateById() instead.
            "::updateById::Business::operators": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Businesses/:id/operators/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Business.operators() instead.
            "::get::Business::operators": {
              isArray: true,
              url: urlBase + "/Businesses/:id/operators",
              method: "GET",
            },

            // INTERNAL. Use Business.operators.create() instead.
            "::create::Business::operators": {
              url: urlBase + "/Businesses/:id/operators",
              method: "POST",
            },

            // INTERNAL. Use Business.operators.createMany() instead.
            "::createMany::Business::operators": {
              isArray: true,
              url: urlBase + "/Businesses/:id/operators",
              method: "POST",
            },

            // INTERNAL. Use Business.operators.destroyAll() instead.
            "::delete::Business::operators": {
              url: urlBase + "/Businesses/:id/operators",
              method: "DELETE",
            },

            // INTERNAL. Use Business.operators.count() instead.
            "::count::Business::operators": {
              url: urlBase + "/Businesses/:id/operators/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Operator#getCurrent
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Operators" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Operator#upsert
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#updateOrCreate
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#patchOrCreateWithWhere
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#update
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#destroyById
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#removeById
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Operator#prototype$updateAttributes
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Operator` object.)
             * </em>
             */
        R["prototype$updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Operator#getCachedCurrent
         * @methodOf lbServices.Operator
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Operator#login} or
         * {@link lbServices.Operator#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Operator instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Operator#isAuthenticated
         * @methodOf lbServices.Operator
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Operator#getCurrentId
         * @methodOf lbServices.Operator
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Operator#modelName
        * @propertyOf lbServices.Operator
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Operator`.
        */
        R.modelName = "Operator";


            /**
             * @ngdoc method
             * @name lbServices.Operator#business
             * @methodOf lbServices.Operator
             *
             * @description
             *
             * Fetches belongsTo relation business.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Operator id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Business` object.)
             * </em>
             */
        R.business = function() {
          var TargetResource = $injector.get("Business");
          var action = TargetResource["::get::Operator::business"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && config.url.indexOf(urlBaseHost) === -1) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);

'use strict';

/* Controllers */
angular.module('app').controller('AppCtrl', [
  '$scope',
  '$translate',
  '$localStorage',
  '$window',
  '$rootScope',
  'Session',
  '$state',
  function(
    $scope,
    $translate,
    $localStorage,
    $window,
    $rootScope,
    Session,
    $state
  ) {
    // add 'ie' classes to html
    var isIE = !!navigator.userAgent.match(/MSIE/i);
    if (isIE) {
      angular.element($window.document.body).addClass('ie');
    }
    if (isSmartDevice($window)) {
      angular.element($window.document.body).addClass('smart');
    }
    /*
			 $rootScope.$on( '$stateChangeStart',
			 function ( event, toState, toParams, fromState, fromParams ) {
			 if ( toState !== 'access.signIn' ) {
			 if ( !Session.business ) {
			 event.preventDefault();
			 $state.go( "access.signIn" );
			 }
			 }
			 } );*/
    // config
    $scope.app = {
      name: 'Hotspotplus',
      domain: 'https://hotspotplus.ir',
      version: '5.0',
      // for chart colors
      color: {
        primary: '#7266ba',
        info: '#23b7e5',
        success: '#27c24c',
        warning: '#fad733',
        danger: '#f05050',
        light: '#e8eff0',
        dark: '#3a3f51',
        black: '#1c2b36'
      },
      settings: {
        themeID: 1,
        navbarHeaderColor: 'bg-black',
        navbarCollapseColor: 'bg-white-only',
        asideColor: 'bg-black',
        headerFixed: true,
        asideFixed: false,
        asideFolded: false,
        asideDock: false,
        container: false
      }
    };

    // save settings to local storage
    if (angular.isDefined($localStorage.settings)) {
      $scope.app.settings = $localStorage.settings;
    } else {
      $localStorage.settings = $scope.app.settings;
    }
    $scope.$watch(
      'app.settings',
      function() {
        if ($scope.app.settings.asideDock && $scope.app.settings.asideFixed) {
          // aside dock and fixed must set the header fixed.
          $scope.app.settings.headerFixed = true;
        }
        // for box layout, add background image
        //$scope.app.settings.container ? angular.element('html').addClass('bg') : angular.element('html').removeClass('bg');
        angular.element('html').addClass('bg');
        $scope.app.settings.container = false;
        // save to local storage
        $localStorage.settings = $scope.app.settings;
      },
      true
    );

    // angular translate
    $scope.lang = { isopen: false };
    $scope.langs = {
      en: 'English',
      de_DE: 'German',
      it_IT: 'Italian',
      fa_IR: 'Persian'
    };
    $scope.selectLang =
      $scope.langs[$translate.proposedLanguage()] || 'Persian';
    $rootScope.direction = 'rtl';
    $rootScope.localLang = 'fa';
    $scope.setLang = function(langKey, $event) {
      // set the current lang
      $scope.selectLang = $scope.langs[langKey];
      // You can change the language during runtime
      $translate.use(langKey);
      $rootScope.localLang = langKey.split('_')[0];
      $scope.lang.isopen = !$scope.lang.isopen;
      if (langKey == 'fa_IR') {
        window.location.href = 'index.rtl.html';
        $rootScope.direction = 'rtl';
      } else {
        window.location.href = 'index.html';
        $rootScope.direction = 'ltr';
      }
    };

    function isSmartDevice($window) {
      // Adapted from http://www.detectmobilebrowsers.com
      var ua =
        $window['navigator']['userAgent'] ||
        $window['navigator']['vendor'] ||
        $window['opera'];
      // Checks for iOs, Android, Blackberry, Opera Mini, and Windows mobile devices
      return /iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/.test(
        ua
      );
    }

    if (!Session.business) {
      $state.go('access.signIn');
      return;
    }
  }
]);

/**
 * Created by payamyousefi on 2/15/15.
 */
app
  .service('genericService', [
    '$uibModal',
    '$log',
    '$q',
    '$location',
    'PREFIX',
    function($uibModal, $log, $q, $location, PREFIX) {
      this.showPasswordForm = function(options) {
        $uibModal.open({
          backdrop: true,
          animation: true,
          keyboard: true,
          backdropClick: true,
          templateUrl: PREFIX + 'app/common/tpl/passwordForm.html',
          controller: [
            '$scope',
            '$uibModalInstance',
            function($scope, $uibModalInstance) {
              $scope.options = options || {};
              $scope.cancel = function() {
                $uibModalInstance.close();
                options.cancelCallback && options.cancelCallback();
              };
              $scope.save = function() {
                $uibModalInstance.close();
                options.saveCallback &&
                  options.saveCallback($scope.currentPassword, $scope.password);
              };
            }
          ]
        });
      };

      this.showConfirmDialog = function(options) {
        $uibModal.open({
          backdrop: true,
          animation: true,
          keyboard: true,
          backdropClick: true,
          templateUrl: PREFIX + 'app/common/tpl/confirmDialog.html',
          controller: [
            '$scope',
            '$uibModalInstance',
            function($scope, $uibModalInstance) {
              $scope.options = options || {};
              $scope.no = function() {
                $uibModalInstance.close();
                options.noCallback && options.noCallback();
              };
              $scope.yes = function() {
                $uibModalInstance.close();
                options.yesCallback && options.yesCallback();
              };
            }
          ]
        });
      };
    }
  ])
  .service('crudUtils', [
    '$log',
    'translateFilter',
    function($log, translateFilter) {
      this.translateObj = function(obj, translateKey) {
        traverse(obj).forEach(function(item) {
          if (angular.isString(item) && this.key == translateKey) {
            this.update(translateFilter(item));
          }
        });
      };
    }
  ])
  .service('appMessenger', [
    'toaster',
    'translateFilter',
    function(toaster, translateFilter) {
      this.showSuccess = function(message, title) {
        if (title) {
          title = 'common.success';
        }
        toaster.pop(
          'success',
          translateFilter(title),
          translateFilter(message)
        );
      };

      this.showError = function(message, title) {
        if (title) {
          title = 'common.error';
        }
        toaster.pop('error', translateFilter(title), translateFilter(message));
      };

      this.showWarning = function(message, title) {
        if (title) {
          title = 'common.warning';
        }
        toaster.pop(
          'warning',
          translateFilter(title),
          translateFilter(message)
        );
      };

      this.showInfo = function(message, title) {
        if (title) {
          title = 'common.info';
        }
        toaster.pop('info', translateFilter(title), translateFilter(message));
      };

      this.showWait = function(message, title) {
        if (title) {
          title = 'common.wait';
        }
        toaster.pop('wait', translateFilter(title), translateFilter(message));
      };
    }
  ])
  .service('roleService', [
    '$log',
    '$q',
    'Role',
    'RoleMapping',
    function($log, $q, Role, RoleMapping) {
      var self = this;

      this.getRoles = function(principalId) {
        return $q(function(resolve, reject) {
          RoleMapping.find({
            filter: {
              where: { principalType: 'USER', principalId: principalId }
            }
          }).$promise.then(
            function(roleMapping) {
              var roleIds = [];
              roleMapping.forEach(function(rMap) {
                roleIds.push(rMap.roleId);
              });
              if (roleIds.length > 0) {
                self.getRoleNames(roleIds).then(
                  function(names) {
                    resolve(names);
                  },
                  function(error) {
                    reject(error);
                  }
                );
              } else {
                resolve([]);
              }
            },
            function(error) {
              reject(error);
            }
          );
        });
      };

      this.getRoleNames = function(roleIds) {
        return $q(function(resolve, reject) {
          var ids = [];
          roleIds.forEach(function(id) {
            ids.push({ id: id });
          });
          var q = { filter: { where: { or: ids } } };
          if (ids.length > 0) {
            Role.find(q).$promise.then(
              function(roles) {
                var names = [];
                roles.forEach(function(role) {
                  names.push(role.name.toLowerCase());
                });
                resolve(names);
              },
              function(error) {
                reject(error);
              }
            );
          } else {
            resolve(ids);
          }
        });
      };
    }
  ])
  .service('dashboardTiming', [
    '$log',
    'PersianDateService',
    function(log, persianDate) {
      var DAY_MILLISECONDS = 24 * 60 * 60 * 1000;
      var self = this;
      this.startOfWeek = function(date) {
        var dayOfWeek = persianDate.getDay(date) + 1;
        if (dayOfWeek == 7) {
          dayOfWeek = 0;
        }
        date = new Date(date.getTime() - dayOfWeek * DAY_MILLISECONDS).setHours(
          0,
          0,
          0,
          0
        );
        return date;
      };
      this.startOfMonth = function(date) {
        var dayOfMonth = persianDate.getDate(date) - 1;
        return new Date(
          date.getTime() - dayOfMonth * DAY_MILLISECONDS
        ).setHours(0, 0, 0, 0);
      };
      this.endOfMonth = function(date) {
        var dayOfMonth = persianDate.getDate(date) - 1;
        var year = persianDate.getFullYear(date);
        var month = persianDate.getMonth(date) + 1;
        var monthDays = persianDate.persianMonthDays(year, month);
        return new Date(
          date.getTime() + (monthDays - dayOfMonth) * DAY_MILLISECONDS
        ).setHours(0, 0, 0, 0);
      };
      this.advanceTime = function(startDate, endDate) {
        var monthDays = [];
        var result = {
          monthDays: monthDays,
          startDate: startDate,
          endDate: endDate
        };
        var daySelected = (endDate - startDate) / DAY_MILLISECONDS;
        startDate = new Date(startDate);
        endDate = new Date(endDate);

        if (daySelected > 30) {
          var counter = 0;
          var startDateYear = persianDate.getFullYear(startDate);
          var endDateYear = persianDate.getFullYear(endDate);
          var startDateMonth = persianDate.getMonth(startDate);
          var endDateMonth = persianDate.getMonth(endDate);
          // set start date to begin of persian month & round end date to end of persian month
          while (
            startDateYear <= endDateYear &&
            startDateMonth <= endDateMonth
          ) {
            monthDays[counter] = persianDate.persianMonthDays(
              startDateYear,
              startDateMonth
            );
            if (startDateMonth == 12) {
              startDateMonth++;
              startDateYear++;
            } else {
              startDateMonth++;
            }
            counter++;
          }
          startDate = self.startOfMonth(startDate);
          endDate = self.endOfMonth(endDate);
          result = {
            monthDays: monthDays,
            startDate: startDate,
            endDate: endDate
          };
        }
        return result;
      };
      this.getMonthTiming = function(month) {
        var today = new Date();
        var result = {};
        month = month - 1;
        var dayOfMonth = persianDate.getDate(today) - 1;
        var year = persianDate.getFullYear(today);
        var persianMonth = persianDate.getMonth(today);
        var monthDays = persianDate.persianMonthDays(year, month);
        var days = dayOfMonth;

        while (persianMonth > month) {
          persianMonth = persianMonth - 1;
          days += persianDate.persianMonthDays(year, persianMonth);
        }

        result.stratDate = new Date(
          today.getTime() - days * DAY_MILLISECONDS
        ).setHours(0, 0, 0, 0);
        result.endDate = new Date(
          today.getTime() - (days - monthDays + 1) * DAY_MILLISECONDS
        ).setHours(23, 59, 59, 0);
        return result;
      };
    }
  ])
  .service('credit', [
    '$log',
    '$uibModal',
    'PREFIX',
    'englishNumberFilter',
    'Business',
    '$window',
    'appMessenger',
    function(
      $log,
      $uibModal,
      PREFIX,
      englishNumberFilter,
      Business,
      $window,
      appMessenger
    ) {
      this.showIncreaseCreditForm = function(options) {
        $uibModal.open({
          backdrop: true,
          animation: true,
          keyboard: true,
          backdropClick: true,
          templateUrl: PREFIX + 'app/common/tpl/increaseCreditForm.html',
          controller: [
            '$scope',
            '$uibModalInstance',
            'Business',
            '$state',
            '$stateParams',
            function($scope, $uibModalInstance, Business) {
              $scope.options = options || {};
              $scope.bankWait = false;
              var businessId = options.businessId;
              $scope.cancel = function() {
                $uibModalInstance.close();
                options.cancelCallback && options.cancelCallback();
              };
              $scope.payment = function() {
                var amount = Number(englishNumberFilter($scope.amount));
                var paymentOptions = {
                  businessId: businessId,
                  rialPrice: amount,
                  description: options.description
                };
                if ($scope.options.chargedBy == 'business') {
                  $scope.bankWait = true;
                  Business.buyCredit(paymentOptions).$promise.then(
                    function(res) {
                      if (res.url) {
                        $window.location.href = res.url;
                        var message = 'business.chargedSuccessful';
                        options.saveCallback &&
                          options.saveCallback(false, message);
                      } else {
                        var errorMessage = 'error.generalError';
                        options.saveCallback &&
                          options.saveCallback(true, errorMessage);
                      }
                    },
                    function(err) {
                      var errorMessage = 'error.generalError';
                      options.saveCallback &&
                        options.saveCallback(true, errorMessage);
                    }
                  );
                } else if ($scope.options.chargedBy == 'admin') {
                  Business.adminChargeCredit(paymentOptions).$promise.then(
                    function(res) {
                      $uibModalInstance.close();
                      var message = 'business.chargedSuccessful';
                      options.saveCallback &&
                        options.saveCallback(false, message);
                    },
                    function(err) {
                      var errorMessage = 'error.generalError';
                      options.saveCallback &&
                        options.saveCallback(true, errorMessage);
                    }
                  );
                }
              };
            }
          ]
        });
      };
    }
  ])
  .service('uploadModal', [
    '$log',
    '$uibModal',
    'PREFIX',
    'FileStorage',
    'FileUploader',
    'appMessenger',
    'genericService',
    'Business',
    function(
      $log,
      $uibModal,
      PREFIX,
      Files,
      FileUploader,
      appMessenger,
      genericService,
      Business
    ) {
      this.showUploadModal = function(options) {
        $uibModal.open({
          backdrop: true,
          animation: true,
          keyboard: true,
          backdropClick: true,
          size: 'lg',
          templateUrl: PREFIX + 'app/widgets/upload/tpl/uploadModal.html',
          controller: [
            '$scope',
            '$uibModalInstance',
            function($scope, $uibModalInstance) {
              $scope.image = {};
              var businessId = options.businessId;
              if (options.fileId && options.fileId != 'undefined') {
                $scope.image.id = options.fileId;
              }
              if (options.fileName && options.fileName != 'undefined') {
                $scope.image.name = options.fileName;
              }
              var option = { businessId: businessId, fileType: 'image' };
              getFiles(option);
              //create tabs for modal
              $scope.tabs = [
                {
                  title: 'upload.fileList',
                  icon: 'fa-th-list',
                  url: 'app/widgets/upload/tpl/fileListTabContent.html'
                },
                {
                  title: 'upload.file',
                  icon: 'fa-upload',
                  url: 'app/widgets/upload/tpl/uploadTabContent.html'
                }
              ];
              //upload file to data source
              $scope.DownloadUrlPrefix = Window.API_URL;
              var uploader = ($scope.uploader = new FileUploader({
                url: $scope.DownloadUrlPrefix + '/api/file/upload',
                removeAfterUpload: true,
                formData: [{ businessId: businessId }]
              }));
              //delete message after select new file
              uploader.onAfterAddingFile = function(fileItem) {
                $scope.show = false;
              };
              //show success message for uploaded file
              uploader.onSuccessItem = function(
                fileItem,
                response,
                status,
                headers
              ) {
                $scope.show = true;
                $scope.status = 'list-group-item-success';
                $scope.result = 'upload.success';
                $scope.fileName = fileItem.file.name;
                getFiles(option);
              };
              //show error message for failed uploaded file
              uploader.onErrorItem = function(
                fileItem,
                response,
                status,
                headers
              ) {
                $scope.show = true;
                $scope.status = 'list-group-item-danger';
                $scope.result = 'upload.fail';
                $scope.fileName = fileItem.file.name;
              };

              //get files from data source
              function getFiles(business) {
                Files.getFilesByBusinessId(business).$promise.then(function(
                  files
                ) {
                  $scope.fileList = files.result;
                }),
                  function(error) {
                    $log.error(
                      'can not get files info from data source: ' + error
                    );
                    appMessenger.showError('error.generalError');
                  };
              }

              //select image
              $scope.check = function(image) {
                $scope.image.id = image.id;
                $scope.image.name = image.name;
              };
              //save file and close modal
              $scope.saveImage = function() {
                option.id = $scope.image.id;
                option.name = $scope.image.name;
                options.saveCallback && options.saveCallback(option);
                $uibModalInstance.close();
              };
              $scope.removeImage = function(fileId) {
                genericService.showConfirmDialog({
                  title: 'general.warning',
                  message: 'general.areYouSureRemoveFile',
                  noBtnLabel: 'general.no',
                  yesBtnLabel: 'general.yes',
                  yesCallback: function() {
                    Business.files
                      .destroyById({ id: businessId }, { fk: fileId })
                      .$promise.then(
                        function(res) {
                          // if there is a logo or background that is deleted we also remove it from the related themeConfig
                          if (options.themeId && options.businessThemeConfig) {
                            angular.forEach(
                              options.businessThemeConfig,
                              function(themeConfig, themeId) {
                                if (
                                  themeConfig['logo'] &&
                                  themeConfig['logo'].id &&
                                  themeConfig['logo'].id == fileId
                                ) {
                                  themeConfig['logo'] = {};
                                  if (options.themeId == themeId) {
                                    $scope.image.id = null;
                                    $scope.image.name = null;
                                  }
                                }
                                if (
                                  themeConfig['background'] &&
                                  themeConfig['background'].id &&
                                  themeConfig['background'].id == fileId
                                ) {
                                  themeConfig['background'] = {};
                                  if (options.themeId == themeId) {
                                    $scope.image.id = null;
                                    $scope.image.name = null;
                                  }
                                }
                              }
                            );
                            Business.prototype$patchAttributes(
                              { id: businessId },
                              { themeConfig: options.businessThemeConfig }
                            ).$promise.then(
                              function(res) {
                                appMessenger.showSuccess(
                                  'upload.removeSuccessFull'
                                );
                                options.saveCallback &&
                                  options.saveCallback(option);
                                $uibModalInstance.close();
                              },
                              function(err) {
                                appMessenger.showError(
                                  'upload.removeUnSuccessFull'
                                );
                              }
                            );
                          }
                        },
                        function(err) {
                          appMessenger.showError('upload.removeUnSuccessFull');
                        }
                      );
                  },
                  NoCallback: function() {}
                });
              };
              //close modal
              $scope.cancel = function() {
                $uibModalInstance.close();
                options.cancelCallback && options.cancelCallback();
              };
            }
          ]
        });
      };
    }
  ])
  .service('usernameService', [
    '$log',
    function($log) {
      this.trim = function(username) {
        return username.split('@')[0];
      };
      this.concat = function(username, businessId) {
        return username.concat('@', businessId);
      };
    }
  ])
  .service('errorMessenger', [
    '$log',
    function($log) {
      this.send = function(messageName, sessionData) {
        var tags = {};
        var errorName = messageName + ' Login';
        switch (messageName) {
          case 'Member':
            tags.username = sessionData.username;
            tags.businessId = sessionData.businessId;
            tags.memberId = sessionData.id;
            tags.mobile = sessionData.mobile;
            tags.fullName = sessionData.fullName;
            break;
          case 'Business':
            tags.username = sessionData.username;
            tags.businessId = sessionData.id;
            tags.mobile = sessionData.mobile;
            tags.fullName = sessionData.fullName;
            tags.email = sessionData.email;
            tags.title = sessionData.title;
            break;
          case 'Reseller':
            tags.username = sessionData.username;
            tags.resellerId = sessionData.id;
            tags.mobile = sessionData.mobile;
            tags.fullName = sessionData.fullName;
            tags.email = sessionData.email;
            tags.title = sessionData.title;
            break;
          case 'Admin':
            tags.username = sessionData.username;
            tags.email = sessionData.email;
            tags.adminId = sessionData.id;
            tags = sessionData;
        }
      };
    }
  ]);

/**
 * Created by payamyousefi on 5/5/15.
 */

app
  .factory('authorization', [
    'Session',
    function(Session) {
      var authorize = function(
        loginRequired,
        requiredPermissions,
        permissionCheckType
      ) {
        var result = 'authorized',
          user =
            Session.business ||
            Session.user ||
            Session.reseller ||
            Session.operator ||
            Session.member,
          loweredPermissions = [],
          hasPermission = true,
          permission,
          i;
        var roles = Session.roles;

        permissionCheckType = permissionCheckType || 'atLeastOne';
        if (loginRequired === true && !user) {
          result = 'loginRequired';
        } else if (
          loginRequired === true &&
          user &&
          (requiredPermissions === undefined ||
            requiredPermissions.length === 0)
        ) {
          // Login is required but no specific permissions are specified.
          result = 'authorized';
        } else if (requiredPermissions) {
          if (!roles || roles.length == 0) {
            result = 'notAuthorised';
          } else {
            loweredPermissions = [];
            angular.forEach(roles, function(permission) {
              loweredPermissions.push(permission.toLowerCase());
            });

            for (i = 0; i < requiredPermissions.length; i += 1) {
              permission = requiredPermissions[i].toLowerCase();

              if (permissionCheckType === 'all') {
                hasPermission =
                  hasPermission && loweredPermissions.indexOf(permission) > -1;
                // if all the permissions are required and hasPermission is false there is no point carrying on
                if (hasPermission === false) {
                  break;
                }
              } else if (permissionCheckType === 'one') {
                hasPermission = loweredPermissions.indexOf(permission) > -1;
                // if we only need one of the permissions and we have it there is no point carrying on
                if (hasPermission) {
                  break;
                }
              }
            }
            result = hasPermission ? 'authorized' : 'notAuthorised';
          }
        }
        return result;
      };

      return {
        authorize: authorize
      };
    }
  ])
  .factory('Session', [
    'Business',
    'Member',
    'Operator',
    'Reseller',
    function(Business, Member,Operator, Reseller) {
      var props = [
        'business',
        'operator',
        'roles',
        'user',
        'userType',
        'reseller',
        'member'
      ];

      function Session() {
        var self = this;
        props.forEach(function(name) {
          self[name] = load(name);
        });
        this.rememberMe = undefined;
        this.currentUserData = null;
        let businessId;
        if (self.business && self.business.id) {
          businessId = self.business.id;
        }
        if (
          window.location.href &&
          window.location.href.indexOf('public') === -1
        ) {
          switch (self.userType) {
            case 'Business':
              Business.findById({ id: businessId });
              break;
            case 'Member':
              Member.findById({ id: self.member.id });
              break;
            case 'Reseller':
              Reseller.findById({ id: self.reseller.id });
              break;
            case 'Operator':
              Operator.findById({ id: self.operator.id });
              break;
            default:
              break;
          }
        }
      }

      Session.prototype.isAdminUser = function() {
        return this.userType == 'Admin';
      };
      Session.prototype.isBusinessUser = function() {
        return this.userType == 'Business';
      };
      Session.prototype.isResellerUser = function() {
        return this.userType == 'Reseller';
      };
      Session.prototype.isOperatorUser = function() {
        return this.userType == 'Operator';
      };
      Session.prototype.isMemberUser = function() {
        return this.userType == 'Member';
      };

      Session.prototype.save = function() {
        var self = this;
        var storage = this.rememberMe ? localStorage : sessionStorage;
        props.forEach(function(name) {
          save(storage, name, self[name]);
        });
      };

      Session.prototype.setSession = function(data) {
        for (var i in props) {
          var key = props[i];
          var value = data[key];
          this[key] = value;
        }
        var theUser = {};
        if (this.business) {
          theUser = this.business;
        } else if (this.operator) {
          theUser = this.operator;
        } else if (this.reseller) {
          theUser = this.reseller;
        } else if (this.member) {
          theUser = this.member;
        } else {
          theUser = this.user;
        }

        this.save();
      };

      Session.prototype.clearSession = function() {
        for (var i in props) {
          var key = props[i];
          this[key] = null;
        }
        this.save();
      };

      Session.prototype.clearStorage = function() {
        props.forEach(function(name) {
          save(sessionStorage, name, null);
          save(localStorage, name, null);
        });
      };

      function save(storage, name, value) {
        var key = name;
        if (value == null) value = '';
        if (angular.isObject(value)) {
          value = JSON.stringify(value);
        }
        storage[key] = value;
      }

      function load(name) {
        var key = name;
        var value = localStorage[key] || sessionStorage[key] || null;
        if (IsJsonString(value)) {
          value = JSON.parse(value);
        }
        return value;
      }

      function IsJsonString(str) {
        try {
          JSON.parse(str);
        } catch (e) {
          return false;
        }
        return true;
      }

      return new Session();
    }
  ]);

/**
 * Created by payamyousefi on 5/5/15.
 */

app.directive('access', [
  'authorization',
  function(authorization) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var makeVisible = function() {
            element.removeClass('hidden');
          },
          makeHidden = function() {
            element.addClass('hidden');
          },
          determineVisibility = function(resetFirst) {
            var result;
            if (resetFirst) {
              makeVisible();
            }

            result = authorization.authorize(
              true,
              roles,
              attrs.accessPermissionType
            );
            if (result === 'authorized') {
              makeVisible();
            } else {
              makeHidden();
            }
          };
        var rawRoles = attrs.access.split(',');
        var roles = [];
        rawRoles.forEach(function(role) {
          roles.push(role.trim());
        });

        if (roles.length > 0) {
          determineVisibility(true);
        }
      }
    };
  }
]);

'use strict';

/**
 * 0.1.1
 * Deferred load js/css file, used for ui-jq.js and Lazy Loading.
 *
 * @ flatfull.com All Rights Reserved.
 * Author url: http://themeforest.net/user/flatfull
 */

angular.module('ui.load', []).service('uiLoad', [
  '$document',
  '$q',
  '$timeout',
  function($document, $q, $timeout) {
    var loaded = [];
    var promise = false;
    var deferred = $q.defer();

    /**
     * Chain loads the given sources
     * @param srcs array, script or css
     * @returns {*} Promise that will be resolved once the sources has been loaded.
     */
    this.load = function(srcs) {
      srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
      var self = this;
      if (!promise) {
        promise = deferred.promise;
      }
      angular.forEach(srcs, function(src) {
        promise = promise.then(function() {
          return src.indexOf('.css') >= 0
            ? self.loadCSS(src)
            : self.loadScript(src);
        });
      });
      deferred.resolve();
      return promise;
    };

    /**
     * Dynamically loads the given script
     * @param src The url of the script to load dynamically
     * @returns {*} Promise that will be resolved once the script has been loaded.
     */
    this.loadScript = function(src) {
      if (loaded[src]) return loaded[src].promise;

      var deferred = $q.defer();
      var script = $document[0].createElement('script');
      script.src = src;
      script.onload = function(e) {
        $timeout(function() {
          deferred.resolve(e);
        });
      };
      script.onerror = function(e) {
        $timeout(function() {
          deferred.reject(e);
        });
      };
      $document[0].body.appendChild(script);
      loaded[src] = deferred;

      return deferred.promise;
    };

    /**
     * Dynamically loads the given CSS file
     * @param href The url of the CSS to load dynamically
     * @returns {*} Promise that will be resolved once the CSS file has been loaded.
     */
    this.loadCSS = function(href) {
      if (loaded[href]) return loaded[href].promise;

      var deferred = $q.defer();
      var style = $document[0].createElement('link');
      style.rel = 'stylesheet';
      style.type = 'text/css';
      style.href = href;
      style.onload = function(e) {
        $timeout(function() {
          deferred.resolve(e);
        });
      };
      style.onerror = function(e) {
        $timeout(function() {
          deferred.reject(e);
        });
      };
      $document[0].head.appendChild(style);
      loaded[href] = deferred;

      return deferred.promise;
    };
  }
]);

'use strict';

/* Filters */
// need load the moment.js to use this filter.
angular.module('app').filter('fromNow', function() {
  return function(date) {
    return moment(date).fromNow();
  };
});

/**
 * Created by payamyousefi on 7/16/16.
 */

app.controller('BusinessSignUpController', [
  '$scope',
  '$log',
  'Business',
  '$state',
  'appMessenger',
  'englishNumberFilter',
  function($scope, $log, Business, $state, appMessenger, englishNumberFilter) {
    $scope.business = {};
    $scope.authError = null;

    $scope.signUp = function() {
      $scope.business.mobile = englishNumberFilter($scope.business.mobile);
      Business.create($scope.business).$promise.then(
        function(result) {
          appMessenger.showSuccess('business.signUpSuccessful');
          $state.go('access.signIn');
        },
        function(errorResult) {
          $log.error(errorResult);
          if (!errorResult.data) {
            appMessenger.showError('error.generalError');
            return ($scope.authError = 'error.generalError');
          }

          if (errorResult.data.error && errorResult.data.error.message) {
            $scope.authError = errorResult.data.error.message;
            appMessenger.showError(errorResult.data.error.message);
          } else {
            $scope.authError = 'error.generalError';
            appMessenger.showError('error.generalError');
          }
        }
      );
    };
  }
]);

app.controller('BusinessSignInController', [
  '$scope',
  '$log',
  'Business',
  '$state',
  'appMessenger',
  'Session',
  'LoopBackAuth',
  'roleService',
  'errorMessenger',
  function(
    $scope,
    $log,
    Business,
    $state,
    appMessenger,
    Session,
    LoopBackAuth,
    roleService,
    errorMessenger
  ) {
    $scope.credential = {};
    $scope.authError = null;
    $scope.signIn = function() {
      Business.login($scope.credential).$promise.then(
        function(result) {
          var SessionData = {};
          roleService.getRoles(LoopBackAuth.currentUserId).then(
            function(roles) {
              SessionData.userType = 'Business';
              SessionData.business = LoopBackAuth.currentUserData;
              SessionData.roles = roles;
              Session.setSession(SessionData);
              $state.go('app.loadDashboard');
              appMessenger.showSuccess('user.signInSuccessful');
            },
            function() {
              appMessenger.showError('auth.loadingRoleFailed');
            }
          );
        },
        function(errorResult) {
          $log.error(errorResult);
          appMessenger.showError('user.invalidLogin');
        }
      );
    };

    $scope.signOut = function() {
      Business.logout().$promise.then(
        function() {
          $state.go('access.signIn');
          Session.clearSession();
        },
        function(error) {
          Session.clearSession();
          appMessenger.showError('auth.logoutFailed');
        }
      );
    };
  }
]);

/**
 * Created by payamyousefi on 7/16/16.
 */

app.controller('AdminSignInController', [
  '$scope',
  '$log',
  'User',
  '$state',
  'appMessenger',
  'Session',
  'LoopBackAuth',
  'roleService',
  'errorMessenger',
  function(
    $scope,
    $log,
    User,
    $state,
    appMessenger,
    Session,
    LoopBackAuth,
    roleService,
    errorMessenger
  ) {
    $scope.credential = {};
    $scope.authError = null;
    $scope.signIn = function() {
      User.login($scope.credential).$promise.then(
        function(result) {
          var SessionData = {};
          roleService.getRoles(LoopBackAuth.currentUserId).then(
            function(roles) {
              SessionData.userType = 'Admin';
              SessionData.user = LoopBackAuth.currentUserData;
              SessionData.roles = roles;
              Session.setSession(SessionData);
              $state.go('app.businesses');
              appMessenger.showSuccess('user.signInSuccessful');
            },
            function() {
              appMessenger.showError('auth.loadingRoleFailed');
            }
          );
        },
        function(errorResult) {
          $log.error(errorResult);
          appMessenger.showError('user.invalidLogin');
        }
      );
    };

    $scope.signOut = function() {
      User.logout().$promise.then(
        function() {
          $state.go('access.adminSignIn');
          Session.clearSession();
        },
        function(error) {
          Session.clearSession();
          appMessenger.showError('auth.logoutFailed');
        }
      );
    };
  }
]);

/**
 * Created by payamyousefi on 7/16/16.
 */

app.controller('ResellerSignUpController', [
  '$scope',
  '$log',
  'Reseller',
  '$state',
  'appMessenger',
  'englishNumberFilter',
  function($scope, $log, Reseller, $state, appMessenger, englishNumberFilter) {
    $scope.reseller = {};
    $scope.authError = null;
    $scope.signUp = function() {
      $scope.reseller.mobile = englishNumberFilter($scope.reseller.mobile);
      Reseller.create($scope.reseller).$promise.then(
        function(result) {
          appMessenger.showSuccess('reseller.signUpSuccessful');
          $state.go('access.resellerSignIn');
        },
        function(errorResult) {
          $log.error(errorResult);
          if (!errorResult.data) {
            appMessenger.showError('error.generalError');
            return ($scope.authError = 'error.generalError');
          }
          if (errorResult.data.error.status == 422) {
            $scope.authError = 'error.invalidMobile';
            appMessenger.showError('error.invalidMobile');
          } else {
            $scope.authError = 'error.generalError';
            appMessenger.showError('error.generalError');
          }
        }
      );
    };
  }
]);

app.controller('ResellerSignInController', [
  '$scope',
  '$log',
  'Reseller',
  '$state',
  'appMessenger',
  'Session',
  'LoopBackAuth',
  'roleService',
  'englishNumberFilter',
  'errorMessenger',
  function(
    $scope,
    $log,
    Reseller,
    $state,
    appMessenger,
    Session,
    LoopBackAuth,
    roleService,
    englishNumberFilter,
    errorMessenger
  ) {
    $scope.credential = {};
    $scope.authError = null;
    $scope.signIn = function() {
      $scope.credential.username = englishNumberFilter(
        $scope.credential.username
      );
      Reseller.login($scope.credential).$promise.then(
        function(result) {
          var SessionData = {};
          roleService.getRoles(LoopBackAuth.currentUserId).then(
            function(roles) {
              SessionData.userType = 'Reseller';
              SessionData.reseller = LoopBackAuth.currentUserData;
              SessionData.roles = roles;
              Session.setSession(SessionData);
              $state.go('app.loadDashboard');
              appMessenger.showSuccess('user.signInSuccessful');
            },
            function() {
              appMessenger.showError('auth.loadingRoleFailed');
            }
          );
        },
        function(errorResult) {
          $log.error(errorResult);
          appMessenger.showError('user.invalidLogin');
        }
      );
    };

    $scope.signOut = function() {
      Reseller.logout().$promise.then(
        function() {
          $state.go('access.resellerSignIn');
          Session.clearSession();
        },
        function(error) {
          Session.clearSession();
          appMessenger.showError('auth.logoutFailed');
        }
      );
    };
  }
]);

/**
 * Created by rezanazari on 7/1/17.
 */

app.controller('MemberSignInController', [
  '$scope',
  '$log',
  'Member',
  'Business',
  '$state',
  '$location',
  'appMessenger',
  'Session',
  'LoopBackAuth',
  'roleService',
  'errorMessenger',
  function(
    $scope,
    $log,
    Member,
    Business,
    $state,
    $location,
    appMessenger,
    Session,
    LoopBackAuth,
    roleService,
    errorMessenger
  ) {
    $scope.credential = {};
    $scope.authError = null;
    var businessName = '';
    var businessId = '';
    if ($location.search().username) {
      $scope.credential.username = $location.search().username;
    }
    if ($location.search().password) {
      $scope.credential.password = $location.search().password;
    }
    if ($location.search().name) {
      businessId = $location.search().name;
    } else if ($state.params.name) {
      businessName = $state.params.name;
    }

    $scope.signIn = function() {
      var loginData = {};
      loginData.password = $scope.credential.password;
      if (businessId && businessId != '') {
        loginData.username = $scope.credential.username + '@' + businessId;
        login(loginData);
      } else if (businessName && businessName != '') {
        var options = {
          businessUrl: businessName,
          username: $scope.credential.username
        };
        Member.getBusinessId(options).$promise.then(
          function(username) {
            loginData.username = username.username;
            loginData.urlPrefix = options.businessUrl;
            login(loginData);
          },
          function() {
            appMessenger.showError('business.settingsLoadUnSuccessful');
          }
        );
      }
    };

    var login = function(loginData) {
      Member.login(loginData).$promise.then(
        function() {
          roleService.getRoles(LoopBackAuth.currentUserId).then(
            function(roles) {
              var SessionData = {};
              SessionData.userType = 'Member';
              SessionData.member = LoopBackAuth.currentUserData;
              SessionData.member.urlPrefix = loginData.urlPrefix;
              SessionData.roles = roles;
              Session.setSession(SessionData);
              $state.go('app.loadDashboard');
              appMessenger.showSuccess('user.signInSuccessful');
            },
            function() {
              appMessenger.showError('auth.loadingRoleFailed');
            }
          );
        },
        function() {
          appMessenger.showError('user.invalidLogin');
        }
      );
    };
    $scope.signOut = function() {
      Member.logout().$promise.then(
        function() {
          var urlPrefix = Session.member.urlPrefix;
          $state.go('access.memberSignIn', { name: urlPrefix });
          Session.clearSession();
        },
        function(error) {
          Session.clearSession();
          appMessenger.showError('auth.logoutFailed');
        }
      );
    };
  }
]);

/**
 * Created by rezanazari on 7/1/17.
 */

app.controller('OperatorSignInController', [
  '$scope',
  '$log',
  'Operator',
  'Business',
  '$state',
  '$location',
  'appMessenger',
  'Session',
  'Member',
  'LoopBackAuth',
  'roleService',
  'errorMessenger',
  function(
    $scope,
    $log,
    Operator,
    Business,
    $state,
    $location,
    appMessenger,
    Session,
    Member,
    LoopBackAuth,
    roleService,
    errorMessenger
  ) {
    $scope.credential = {};
    $scope.authError = null;
    var businessName = '';
    var businessId = '';
    if ($location.search().username) {
      $scope.credential.username = $location.search().username;
    }
    if ($location.search().password) {
      $scope.credential.password = $location.search().password;
    }
    if ($location.search().name) {
      businessId = $location.search().name;
    } else if ($state.params.name) {
      businessName = $state.params.name;
    }

    $scope.signIn = function() {
      var loginData = {};
      loginData.password = $scope.credential.password;
      if (businessId && businessId != '') {
        loginData.username = $scope.credential.username + '@' + businessId;
        login(loginData);
      } else if (businessName && businessName != '') {
        var options = {
          businessUrl: businessName,
          username: $scope.credential.username
        };
        Member.getBusinessId(options).$promise.then(
          function(username) {
            loginData.username = username.username;
            loginData.urlPrefix = options.businessUrl;
            login(loginData);
          },
          function() {
            appMessenger.showError('business.settingsLoadUnSuccessful');
          }
        );
      }
    };

    var login = function(loginData) {
      Operator.login(loginData).$promise.then(
        function() {
          roleService.getRoles(LoopBackAuth.currentUserId).then(
            function(roles) {
              var SessionData = {};
              SessionData.userType = 'Operator';
              SessionData.business = {
                id:LoopBackAuth.currentUserData.businessId
              };
              SessionData.operator = LoopBackAuth.currentUserData;
              SessionData.operator.urlPrefix = loginData.urlPrefix;
              SessionData.roles = roles;
              Session.setSession(SessionData);
              $state.go('app.loadDashboard');
              appMessenger.showSuccess('user.signInSuccessful');
            },
            function() {
              appMessenger.showError('auth.loadingRoleFailed');
            }
          );
        },
        function() {
          appMessenger.showError('user.invalidLogin');
        }
      );
    };
    $scope.signOut = function() {
      Operator.logout().$promise.then(
        function() {
          var urlPrefix = Session.operator.urlPrefix;
          $state.go('access.operatorSignIn', { name: urlPrefix });
          Session.clearSession();
        },
        function(error) {
          Session.clearSession();
          appMessenger.showError('auth.logoutFailed');
        }
      );
    };
  }
]);

/**
 * Created by hamidehnouri on 8/8/2016 AD.
 */

app.controller('businessSettings', [
  '$http',
  '$scope',
  '$log',
  '$state',
  'Business',
  'appMessenger',
  'genericService',
  'Session',
  'credit',
  'Charge',
  'englishNumberFilter',
  'translateNumberFilter',
  'Nas',
  'AclService',
  function(
    $http,
    $scope,
    $log,
    $state,
    Business,
    appMessenger,
    genericService,
    Session,
    credit,
    Charge,
    englishNumberFilter,
    translateNumberFilter,
    Nas,
    AclService
  ) {
    if (Session.business == null) {
      return;
    }
    var businessId = Session.business.id;
    $scope.urlHost = window.location.host;
    $scope.urlPath = '/#/access/public/';

    $scope.business = {};

    $scope.RADIUS_CONFIG = {};
    Nas.loadRadiusInfo().$promise.then(
      function(res) {
        $scope.RADIUS_CONFIG = res;
      },
      function(error) {
        appMessenger.showError('error.generalError');
      }
    );

    // load the business from the session
    Business.findById({ id: businessId }).$promise.then(
      function(business) {
        $scope.business = business;
        $scope.business.groupMemberHelps =
          $scope.business.groupMemberHelps || {};
        $scope.business.mobile = translateNumberFilter(business.mobile);
      },
      function(err) {
        appMessenger.showError('business.settingsLoadUnSuccessful');
      }
    );

    // load charges
    var startDate = new Date().setMonth(new Date().getMonth() - 1);
    Charge.loadCharges({
      businessId: businessId,
      startDate: startDate,
      skip: 0,
      limit: 1000
    }).$promise.then(
      function(res) {
        $scope.activities = [];
        angular.forEach(res.charges, function(value, index) {
          //response from elk has _source attribute
          $scope.activities[index] = value._source || value;
          /*if ( $scope.activities[ index ].forThe ) {
				 $scope.activities[ index ].forThe = $scope.activities[ index ].forThe.split ( ':' )
				 }*/
          if ($scope.activities[index].amount > 0) {
            $scope.activities[index].class = 'info';
            $scope.activities[index].icon = 'fa fa-arrow-up text-info';
            $scope.activities[index].forThe = 'increaseCharge';
          } else {
            $scope.activities[index].class = 'warning';
            $scope.activities[index].icon = 'fa fa-arrow-down text-warning';
            $scope.activities[index].forThe = 'decreaseCharge';
          }
        });
      },
      function(error) {
        appMessenger.showError('business.chargeLoadUnSuccessful');
        return error;
      }
    );

    Business.getBalance({ businessId: businessId }).$promise.then(
      function(res) {
        $scope.balance = res.balance;
      },
      function(error) {
        appMessenger.showError('business.balanceLoadUnSuccessful');
        return error;
      }
    );

    // get time zones from json
    $http.get('app/business/timeZones.json').then(function(res) {
      $scope.timeZones = res.data;
    });

    $scope.$watch('business.autoAssignInternetPlan', function(
      newValue,
      oldValue
    ) {
      if (
        newValue == true &&
        $scope.internetPlans &&
        $scope.internetPlans.length == 0
      ) {
        $scope.business.defaultInternetPlan = {};
        appMessenger.showWarning('member.pleaseCreateAnInternetPlan');
      }
    });

    // save the business settings
    $scope.save = function() {
      $scope.business.mobile = englishNumberFilter($scope.business.mobile);
      if ($scope.internetPlans && $scope.internetPlans.length == 0) {
        appMessenger.showWarning('business.autoAssignInternetPlanNotSaved');
        $scope.business.autoAssignInternetPlan = false;
      }
      if ($scope.business.autoAssignInternetPlan === false) {
        $scope.business.defaultInternetPlan = {};
      }
      Business.prototype$patchAttributes(
        { id: businessId },
        $scope.business
      ).$promise.then(
        function(res) {
          appMessenger.showSuccess('business.settingsUpdateSuccessful');
        },
        function(err) {
          appMessenger.showError('business.settingsUpdateUnSuccessful');
        }
      );
    };

    // change the business login password
    $scope.changePassword = function() {
      genericService.showPasswordForm({
        title: 'general.changePassword',
        cancelBtnLabel: 'general.cancel',
        saveBtnLabel: 'general.save',
        saveCallback: function(currentPassword, password) {
          var credential = {};
          credential.username = $scope.business.username;
          credential.password = currentPassword;
          Business.login(credential).$promise.then(
            function(result) {
              Business.prototype$patchAttributes(
                { id: businessId },
                { password: password }
              ).$promise.then(
                function(res) {
                  appMessenger.showSuccess('general.passwordChangeSuccessful');
                },
                function(err) {
                  appMessenger.showError('general.passwordChangeUnSuccessful');
                }
              );
            },
            function(errorResult) {
              $log.error(errorResult);
              appMessenger.showError('general.invalidPassword');
            }
          );
        }
      });
    };

    $scope.increaseCredit = function() {
      credit.showIncreaseCreditForm({
        title: 'business.smsCharge',
        cancelBtnLabel: 'general.cancel',
        submitBtnLabel: 'business.sendToBank',
        message: 'business.yourSMSCredit',
        balance: $scope.balance,
        description: 'smsCharge',
        chargedBy: 'business',
        businessId: businessId,
        saveCallback: function() {},
        cancelCallback: function() {}
      });
    };

    $scope.dropboxAccess = function() {
      Business.dropBoxAuthorization({ id: businessId }).$promise.then(
        function(dropBox) {
          if (dropBox.code === 302) {
            window.location.href = dropBox.returnUrl;
          } else {
            appMessenger.showError('business.dropboxAuthorizationFailed');
          }
        },
        function(error) {
          appMessenger.showError('business.dropboxConnectionFailed');
        }
      );
    };
$scope.paypingAccess = function() {
      Business.paypingAuthorization({ id: businessId }).$promise.then(
        function(payping) {
          if (payping.code === 302) {
            window.location.href = payping.returnUrl;
          } else {
            appMessenger.showError('business.paypingAuthorizationFailed');
          }
        },
        function(error) {
          appMessenger.showError('business.paypingConnectionFailed');
        }
      );
    };

    $scope.paypingAccess = function() {
      Business.paypingAuthorization({ id: businessId }).$promise.then(
        function(dropBox) {
          if (dropBox.code === 302) {
            window.location.href = dropBox.returnUrl;
          } else {
            appMessenger.showError('business.paypingAuthorizationFailed');
          }
        },
        function(error) {
          appMessenger.showError('business.paypingConnectionFailed');
        }
      );
    };
  }
]);

/**
 * Created by hamidehnouri on 12/14/2016 AD.
 */
app.controller('subscriptionService', [
  '$scope',
  '$log',
  'Session',
  'Business',
  'appMessenger',
  '$uibModal',
  'PREFIX',
  'Coupon',
  'Invoice',
  function(
    $scope,
    $log,
    Session,
    Business,
    appMessenger,
    $uibModal,
    PREFIX,
    Coupon,
    Invoice
  ) {
    if (Session.business == null) {
      return;
    }
    var businessId = Session.business.id;
    $scope.currentService = {};

    Business.findById({ id: businessId }).$promise.then(
      function(res) {
        if (res.services) {
          $scope.currentService = res.services;
          var currentTime = new Date();
          $scope.currentService.expired =
            currentTime.getTime() > $scope.currentService.expiresAt;
          $scope.currentService.isExpiring =
            currentTime.getTime() > $scope.currentService.expiresAt - 432000000;
          $scope.currentService.remainingDays =
            ($scope.currentService.expiresAt - currentTime.getTime()) /
            86400000;
        } else {
          $scope.currentService.id = 'free';
          $scope.currentService.expired = false;
        }
        if (res.resellerId) {
          $scope.hasReseller = true;
          Business.getResellerMobile({ businessId: businessId }).$promise.then(
            function(result) {
              $scope.resellerMobile = result.mobile;
            },
            function(error) {
              $log.error(error);
              appMessenger.showError('business.settingsLoadUnSuccessful');
            }
          );
        } else {
          $scope.hasReseller = false;
        }
        if (res.serviceType) {
          $scope.currentService.serviceType = res.serviceType;
        } else if (res.onlineUsers == 5) {
          $scope.currentService.serviceType = 'free';
        } else {
          $scope.currentService.serviceType = '-';
        }
        $scope.currentService.onlineUsers = res.onlineUsers;
        $scope.currentService.durationInMonths = res.durationInMonths;
      },
      function(error) {
        $log.error(error);
        appMessenger.showError('business.settingsLoadUnSuccessful');
      }
    );
  }
]);

/**
 * Created by hamidehnouri on 8/8/2016 AD.
 */

app.controller('resellerSettings', [
  '$scope',
  '$log',
  '$state',
  'Reseller',
  'appMessenger',
  'Session',
  function($scope, $log, $state, Reseller, appMessenger, Session) {
    if (Session.reseller == null) {
      return;
    }
    $scope.resellerBalance = 0;
    var resellerId = Session.reseller.id;
    Reseller.getBalance({ resellerId: resellerId }).$promise.then(
      function(res) {
        $scope.resellerBalance = res.balance;
      },
      function(error) {
        $log.error(error);
        appMessenger.showError('error.generalError');
      }
    );
    /*
		 Reseller.getOnlineUsers ( { resellerId: resellerId } ).$promise.then ( function ( res ) {
		 $scope.allowedOnlineUsers = res.allowedOnlineUsers;
		 $scope.usedOnlineUsers = res.usedOnlineUsers
		 }, function ( err ) {
		 appMessenger.showError ( 'error.generalError' )
		 } );*/

    /*$scope.buyPackage = function () {
		 $state.go('app.resellersPackages');
		 }*/
  }
]);

/**
 * Created by rezanazari on 7/12/17.
 */
app.controller('buyPlan', [
  '$scope',
  '$log',
  'Session',
  'appMessenger',
  '$uibModal',
  'PREFIX',
  'InternetPlan',
  '$window',
  '$state',
  'Member',
  function(
    $scope,
    $log,
    Session,
    appMessenger,
    $uibModal,
    PREFIX,
    InternetPlan,
    $window,
    $state,
    Member
  ) {
    if (Session.member == null) {
      return;
    }
    var businessId = Session.member.businessId;
    var memberId = Session.member.id;
    $scope.showPlans = function() {
      InternetPlan.find({
        filter: {
          where: {
            businessId: businessId
          }
        }
      }).$promise.then(
        function(plans) {
          if (plans.length === 0) {
            appMessenger.showError('member.noInternetPlan');
            return;
          }
          $uibModal.open({
            backdrop: true,
            animation: true,
            keyboard: true,
            backdropClick: true,
            size: 'lg',
            templateUrl: PREFIX + 'app/member/tpl/hotspot/buyPlan.html',
            controller: [
              '$scope',
              '$uibModalInstance',
              'Member',
              function($scope, $uibModalInstance, Member) {
                $scope.planShow = 'public';
                $scope.plans = plans;
                $scope.bankWait = false;
                $scope.cancel = function() {
                  $uibModalInstance.close();
                };
                $scope.payment = function(planId, planPrice) {
                  var options = {
                    memberId: memberId
                  };
                  if (planPrice === 0) {
                    options.planId = planId;
                    InternetPlan.assignFreePlanToMember(options).$promise.then(
                      function(result) {
                        if (result.ok == true) {
                          $scope.cancel();
                          $state.go('app.loadDashboard');
                          appMessenger.showSuccess('member.addPlanSuccessFull');
                        } else {
                          appMessenger.showError('member.addPlanSuccessFull');
                        }
                      },
                      function error(error) {
                        $log.error(error);
                        if (
                          error.data.error.message ==
                          'default plan activated too many times'
                        ) {
                          appMessenger.showError(
                            'member.defaultPlanActivatedMax'
                          );
                        } else {
                          appMessenger.showError('member.addPlanUnSuccessFull');
                        }
                      }
                    );
                  } else {
                    options.businessId = businessId;
                    options.internetPlanId = planId;
                    $scope.bankWait = true;
                    Member.buyPlan(options).$promise.then(
                      function(res) {
                        if (res.url) {
                          $window.location.href = res.url;
                          appMessenger.showSuccess('member.paymentSuccessful');
                        } else {
                          appMessenger.showError('member.addPlanUnSuccessFull');
                        }
                      },
                      function(error) {
                        $log.error(error);
                        appMessenger.showError('error.generalError');
                      }
                    );
                  }
                };
              }
            ]
          });
        },
        function(error) {
          $log.error(error);
          appMessenger.showError('error.generalError');
        }
      );
    };
  }
]);

/**
 * Created by rezanazari on 7/12/17.
 */
app.controller('increaseBulk', [
  '$scope',
  '$log',
  'Session',
  'appMessenger',
  '$uibModal',
  'PREFIX',
  'InternetPlan',
  'englishNumberFilter',
  'translateNumberFilter',
  '$window',
  function(
    $scope,
    $log,
    Session,
    appMessenger,
    $uibModal,
    PREFIX,
    InternetPlan,
    englishNumberFilter,
    translateNumberFilter,
    $window
  ) {
    if (Session.member == null) {
      return;
    }
    $scope.addBulk = function() {
      var businessId = Session.member.businessId;
      var memberId = Session.member.id;
      var planId = Session.member.internetPlanId;
      InternetPlan.find({
        filter: {
          where: {
            id: planId
          }
        }
      }).$promise.then(
        function(plan) {
          if (!plan[0].extraBulkPrice || plan[0].extraBulkPrice === 0) {
            appMessenger.showWarning('member.noExtraBulk');
            return;
          }
          $uibModal.open({
            backdrop: true,
            animation: true,
            keyboard: true,
            backdropClick: true,
            templateUrl: PREFIX + 'app/member/tpl/hotspot/increaseBulk.html',
            controller: [
              '$scope',
              '$uibModalInstance',
              'Member',
              function($scope, $uibModalInstance, Member) {
                $scope.bankWait = false;
                $scope.bulk = {};
                var totalPrice = 0;
                var amount = 0;
                var price = 0;
                $scope.bulk.price = translateNumberFilter(
                  plan[0].extraBulkPrice * 10
                );
                $scope.bulk.totalPrice = translateNumberFilter(0);
                $scope.$watch('bulk.amount', function(newVal, oldVal) {
                  if (typeof newVal !== 'undefined') {
                    amount = Number(englishNumberFilter($scope.bulk.amount));
                    price = Number(englishNumberFilter($scope.bulk.price));
                    totalPrice = amount * price;
                    $scope.bulk.totalPrice = translateNumberFilter(totalPrice);
                    $scope.bulk.amount = translateNumberFilter(
                      $scope.bulk.amount
                    );
                  } else if (typeof newVal === 'undefined') {
                    $scope.bulk.totalPrice = translateNumberFilter(0);
                  }
                });

                $scope.cancel = function() {
                  $uibModalInstance.close();
                };

                $scope.payment = function() {
                  var options = {
                    memberId: memberId,
                    businessId: businessId,
                    internetPlanId: planId,
                    amount: amount
                  };
                  $scope.bankWait = true;
                  $log.error(options);

                  Member.buyBulk(options).$promise.then(
                    function(res) {
                      if (res.url) {
                        $window.location.href = res.url;
                        appMessenger.showSuccess('member.paymentSuccessful');
                      } else {
                        appMessenger.showError('error.addPlanUnSuccessFull');
                      }
                    },
                    function(error) {
                      $log.error(error);
                      appMessenger.showError('error.generalError');
                    }
                  );
                };
              }
            ]
          });
        },
        function(error) {
          $log.error(error);
          appMessenger.showError('error.generalError');
        }
      );
    };
  }
]);

/**
 * Created by payamyousefi on 2/15/15.
 */
app.service('AclService', [
  '$uibModal',
  '$log',
  '$q',
  '$location',
  'PREFIX',
  'Business',
  'Session',
  'translateFilter',
  function(
    $uibModal,
    $log,
    $q,
    $location,
    PREFIX,
    Business,
    Session,
    translateFilter
  ) {
    this.checkIfPermitted = function(action, clbk, option) {
      var buyPremium = translateFilter('general.buyPremium');
      var buyLogModule = translateFilter('general.buyLogModule');
      var buyMemberPanelModule = translateFilter(
        'general.buyMemberPanelModule'
      );
      var buyPaymentModule = translateFilter('general.buyPaymentModule');

      var businessPlanId;
      if (Session.business.services) {
        //todo: check with payam: 'free' is replaced with 'economic' in order to cover old package ids
        businessPlanId = Session.business.services.id || 'economic';
        //todo: check with payam: this conditional is added in order to cover old package ids
        if (
          !businessPlanId ||
          businessPlanId === 'premium' ||
          businessPlanId === 'silver' ||
          businessPlanId === 'gold' ||
          businessPlanId === 'bronze' ||
          businessPlanId === 'free'
        ) {
          businessPlanId = 'economic';
        }
      } else {
        businessPlanId = 'economic';
      }

      var availablePackages = {
        economic: {
          addMessageSignature: true,
          validateNasIpSrcPacket: true,
          bindMemberToMac: true,
          enableVerificationByCall: true,
          enablePayment: true,
          enablePanel: true,
          enableSecondPassword: true,
          enableUnfilteredSms: true,
          addTicket: true,
          changeLogo: true,
          sendBulkSms: true,
          uploadMembers: true,
          uploadLogo: true,
          customizeHotspotForm: true,
          enableDropbox: true
        },
        economic6: {
          addMessageSignature: true,
          validateNasIpSrcPacket: true,
          bindMemberToMac: true,
          enableVerificationByCall: true,
          enablePayment: true,
          enablePanel: true,
          enableSecondPassword: true,
          enableUnfilteredSms: true,
          addTicket: true,
          changeLogo: true,
          sendBulkSms: true,
          uploadMembers: true,
          uploadLogo: true,
          customizeHotspotForm: true,
          enableDropbox: true
        },
        economic12: {
          addMessageSignature: true,
          validateNasIpSrcPacket: true,
          bindMemberToMac: true,
          enableVerificationByCall: true,
          enablePayment: true,
          enablePanel: true,
          enableSecondPassword: true,
          enableUnfilteredSms: true,
          addTicket: true,
          changeLogo: true,
          sendBulkSms: true,
          uploadMembers: true,
          uploadLogo: true,
          customizeHotspotForm: true,
          enableDropbox: true
        }
      };

      if (action === 'addMessageSignature') {
        if (availablePackages[businessPlanId].addMessageSignature) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'validateNasIpSrcPacket') {
        if (availablePackages[businessPlanId].validateNasIpSrcPacket) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'bindMemberToMac') {
        if (availablePackages[businessPlanId].bindMemberToMac) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enableVerificationByCall') {
        if (availablePackages[businessPlanId].enableVerificationByCall) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enableUnfilteredSms') {
        if (availablePackages[businessPlanId].enableUnfilteredSms) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'addTicket') {
        if (availablePackages[businessPlanId].addTicket) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'changeLogo') {
        if (availablePackages[businessPlanId].changeLogo) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enablePayment') {
        if (availablePackages[businessPlanId].enablePayment) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPaymentModule });
        }
      } else if (action === 'uploadMembers') {
        if (availablePackages[businessPlanId].uploadMembers) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'sendBulkSms') {
        if (availablePackages[businessPlanId].sendBulkSms) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enableSecondPassword') {
        if (availablePackages[businessPlanId].enableSecondPassword) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enablePanel') {
        if (availablePackages[businessPlanId].enablePanel) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyMemberPanelModule });
        }
      } else if (action === 'uploadLogo') {
        if (availablePackages[businessPlanId].uploadLogo) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'customizeHotspotForm') {
        if (availablePackages[businessPlanId].customizeHotspotForm) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyPremium });
        }
      } else if (action === 'enableDropbox') {
        if (availablePackages[businessPlanId].enableDropbox) {
          return clbk({ isPermitted: true });
        } else {
          return clbk({ isPermitted: false, message: buyLogModule });
        }
      } else {
        return clbk({ isPermitted: true });
      }

      function countNas(businessId, clbk) {
        Business.nas.count({ id: businessId }).$promise.then(
          function(result) {
            return clbk(null, result.count);
          },
          function(error) {
            return clbk(error);
          }
        );
      }
    };
  }
]);

/**
 * Created by payamyousefi on 11/8/17.
 */
app.directive('checkAction', [
  '$log',
  'AclService',
  'translateFilter',
  function($log, AclService, translateFilter) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var buyPremiumTitle = translateFilter('general.buyPremiumTitle');
        var makeVisible = function() {
            element.removeAttr('disabled');
            element.removeClass('text-muted');
          },
          makeHidden = function(message) {
            //$log.debug ( element[ 0 ].tagName );
            //$log.debug ( element[ 0 ].type );
            element.addClass('text-muted');
            element.addClass('fakedisabled');
            var el = element[0];
            if (
              el.tagName ===
              'INPUT' /*&& (el.type === 'text' || el.type === 'password')*/
            ) {
              element.attr('readonly', 'readonly');
            }
            element.off('click');
            element.bind('click', function(e) {
              e.stopPropagation && e.stopPropagation();
              return e.preventDefault();
            });
            $(element).popover({
              trigger: 'click',
              html: true,
              toggle: 'popover',
              title:
                "<div style='color: #23b7e5;min-width: 250px'><i class='fa fa-fw fa-lock'></i>" +
                buyPremiumTitle +
                '</div>',
              content: '<div>' + message + '</div>',
              placement: 'bottom'
            });
          },
          determineVisibility = function(resetFirst) {
            if (resetFirst) {
              makeVisible();
            }
            var action = attrs.accessAction;
            AclService.checkIfPermitted(action, function(options) {
              if (options.isPermitted == true) {
                makeVisible();
              } else {
                makeHidden(options.message);
              }
            });
          };

        if (attrs.accessAction) {
          determineVisibility(true);
        }
      }
    };
  }
]);

/**
 * Created by rezanazari on 11/8/17.
 */

app.controller('changePasswordCtrl', [
  '$scope',
  '$log',
  'Session',
  'appMessenger',
  '$uibModal',
  'PREFIX',
  'Member',
  function($scope, $log, Session, appMessenger, $uibModal, PREFIX, Member) {
    if (Session.member == null) {
      return;
    }
    $scope.editPassword = function() {
      var businessId = Session.member.businessId;
      var memberId = Session.member.id;
      Member.loadMemberPassword({
        businessId: businessId,
        memberId: memberId
      }).$promise.then(
        function(res) {
          $uibModal.open({
            backdrop: true,
            animation: true,
            keyboard: true,
            backdropClick: true,
            scope: $scope,
            templateUrl: PREFIX + 'app/member/tpl/passwordForm.html',
            controller: [
              '$scope',
              '$uibModalInstance',
              function($scope, $uibModalInstance) {
                $scope.options = {
                  title: 'member.editPassword',
                  cancelBtnLabel: 'general.cancel',
                  saveBtnLabel: 'general.save',
                  saveAndSendBtnLabel: 'general.saveAndSendPass',
                  sendBtnLabel: 'general.sendPass'
                };
                $scope.newPassword = null;
                $scope.currentPassword = res.passwordText;
                $scope.cancel = function() {
                  $uibModalInstance.close();
                };
                $scope.save = function(sendMessage) {
                  $uibModalInstance.close();
                  if ($scope.newPassword) {
                    Member.prototype$patchAttributes(
                      {
                        id: memberId
                      },
                      { passwordText: $scope.newPassword }
                    ).$promise.then(
                      function(res) {
                        appMessenger.showSuccess(
                          'member.passwordChangeSuccessFull'
                        );
                        if (sendMessage) {
                          $scope.sendPassword(memberId);
                        }
                      },
                      function(err) {
                        appMessenger.showError(
                          'member.passwordChangeUnSuccessFull'
                        );
                      }
                    );
                  } else if (sendMessage) {
                    $scope.sendPassword(memberId);
                  }
                };
              }
            ]
          });
        },
        function(error) {
          $log.error(error);
          appMessenger.showError('error.generalError');
        }
      );
      $scope.sendPassword = function(memberId) {
        Member.sendPassword({
          memberId: memberId,
          businessId: businessId
        }).$promise.then(
          function(result) {
            appMessenger.showSuccess('member.passwordSentSuccessFull');
          },
          function(error) {
            if (
              error == 'memberNotFound' ||
              error == 'noMobileNumber' ||
              error == 'balanceNotEnough'
            ) {
              appMessenger.showError('member.' + error);
              appMessenger.showError('error.generalError');
            } else {
              appMessenger.showError('member.passwordSentUnSuccessFull');
              appMessenger.showError('error.generalError');
            }
          }
        );
      };
    };
  }
]);

angular.module('app').directive('setNgAnimate', [
  '$animate',
  function($animate) {
    return {
      link: function($scope, $element, $attrs) {
        $scope.$watch(
          function() {
            return $scope.$eval($attrs.setNgAnimate, $scope);
          },
          function(valnew, valold) {
            $animate.enabled(!!valnew, $element);
          }
        );
      }
    };
  }
]);

angular.module('app').directive('uiButterbar', [
  '$rootScope',
  '$anchorScroll',
  function($rootScope, $anchorScroll) {
    return {
      restrict: 'AC',
      template: '<span class="bar"></span>',
      link: function(scope, el, attrs) {
        el.addClass('butterbar hide');
        scope.$on('$stateChangeStart', function(event) {
          $anchorScroll();
          el.removeClass('hide').addClass('active');
        });
        scope.$on('$stateChangeSuccess', function(
          event,
          toState,
          toParams,
          fromState
        ) {
          event.targetScope.$watch('$viewContentLoaded', function() {
            el.addClass('hide').removeClass('active');
          });
        });
      }
    };
  }
]);

angular.module('app').directive('uiFocus', function($timeout, $parse) {
  return {
    link: function(scope, element, attr) {
      var model = $parse(attr.uiFocus);
      scope.$watch(model, function(value) {
        if (value === true) {
          $timeout(function() {
            element[0].focus();
          });
        }
      });
      element.bind('blur', function() {
        scope.$apply(model.assign(scope, false));
      });
    }
  };
});

angular.module('app').directive('uiFullscreen', [
  'uiLoad',
  'JQ_CONFIG',
  '$document',
  '$window',
  function(uiLoad, JQ_CONFIG, $document, $window) {
    return {
      restrict: 'AC',
      template:
        '<i class="fa fa-expand fa-fw text"></i><i class="fa fa-compress fa-fw text-active"></i>',
      link: function(scope, el, attr) {
        el.addClass('hide');
        uiLoad.load(JQ_CONFIG.screenfull).then(function() {
          // disable on ie11
          if (
            screenfull.enabled &&
            !navigator.userAgent.match(/Trident.*rv:11\./)
          ) {
            el.removeClass('hide');
          }
          el.on('click', function() {
            var target;
            attr.target && (target = $(attr.target)[0]);
            screenfull.toggle(target);
          });
          $document.on(screenfull.raw.fullscreenchange, function() {
            if (screenfull.isFullscreen) {
              el.addClass('active');
            } else {
              el.removeClass('active');
            }
          });
        });
      }
    };
  }
]);

'use strict';

/**
 * 0.1.1
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular
  .module('ui.jq', ['ui.load'])
  .value('uiJqConfig', {})
  .directive('uiJq', [
    'uiJqConfig',
    'JQ_CONFIG',
    'uiLoad',
    '$timeout',
    function uiJqInjectingFunction(uiJqConfig, JQ_CONFIG, uiLoad, $timeout) {
      return {
        restrict: 'A',
        compile: function uiJqCompilingFunction(tElm, tAttrs) {
          if (
            !angular.isFunction(tElm[tAttrs.uiJq]) &&
            !JQ_CONFIG[tAttrs.uiJq]
          ) {
            throw new Error(
              'ui-jq: The "' + tAttrs.uiJq + '" function does not exist'
            );
          }
          var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];

          return function uiJqLinkingFunction(scope, elm, attrs) {
            function getOptions() {
              var linkOptions = [];

              // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
              if (attrs.uiOptions) {
                linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
                if (
                  angular.isObject(options) &&
                  angular.isObject(linkOptions[0])
                ) {
                  linkOptions[0] = angular.extend({}, options, linkOptions[0]);
                }
              } else if (options) {
                linkOptions = [options];
              }
              return linkOptions;
            }

            // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
            if (attrs.ngModel && elm.is('select,input,textarea')) {
              elm.bind('change', function() {
                elm.trigger('input');
              });
            }

            // Call jQuery method and pass relevant options
            function callPlugin() {
              $timeout(
                function() {
                  elm[attrs.uiJq].apply(elm, getOptions());
                },
                0,
                false
              );
            }

            function refresh() {
              // If ui-refresh is used, re-fire the the method upon every change
              if (attrs.uiRefresh) {
                scope.$watch(attrs.uiRefresh, function(newValue, oldValue) {
                  if (newValue == oldValue) return;
                  callPlugin();
                });
              }
            }

            if (JQ_CONFIG[attrs.uiJq]) {
              uiLoad
                .load(JQ_CONFIG[attrs.uiJq])
                .then(function() {
                  callPlugin();
                  refresh();
                })
                .catch(function() {});
            } else {
              callPlugin();
              refresh();
            }
          };
        }
      };
    }
  ]);

angular.module('app').directive('uiModule', [
  'MODULE_CONFIG',
  'uiLoad',
  '$compile',
  function(MODULE_CONFIG, uiLoad, $compile) {
    return {
      restrict: 'A',
      compile: function(el, attrs) {
        var contents = el.contents().clone();
        return function(scope, el, attrs) {
          el.contents().remove();
          uiLoad.load(MODULE_CONFIG[attrs.uiModule]).then(function() {
            $compile(contents)(scope, function(clonedElement, scope) {
              el.append(clonedElement);
            });
          });
        };
      }
    };
  }
]);

angular.module('app').directive('uiNav', [
  '$timeout',
  function($timeout) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        var _window = $(window),
          _mb = 768,
          wrap = $('.app-aside'),
          next,
          backdrop = '.dropdown-backdrop';
        // unfolded
        el.on('click', 'a', function(e) {
          next && next.trigger('mouseleave.nav');
          var _this = $(this);
          _this
            .parent()
            .siblings('.active')
            .toggleClass('active');
          _this.next().is('ul') &&
            _this.parent().toggleClass('active') &&
            e.preventDefault();
          // mobile
          _this.next().is('ul') ||
            (_window.width() < _mb &&
              $('.off-screen').removeClass('show off-screen'));
        });

        // folded & fixed
        el.on('mouseenter', 'a', function(e) {
          next && next.trigger('mouseleave.nav');
          $('> .nav', wrap).remove();
          if (
            !$('.app-aside-fixed.app-aside-folded').length ||
            _window.width() < _mb ||
            $('.app-aside-dock').length
          )
            return;
          var _this = $(e.target),
            top,
            w_h = $(window).height(),
            offset = 50,
            min = 150;

          !_this.is('a') && (_this = _this.closest('a'));
          if (_this.next().is('ul')) {
            next = _this.next();
          } else {
            return;
          }

          _this.parent().addClass('active');
          top = _this.parent().position().top + offset;
          next.css('top', top);
          if (top + next.height() > w_h) {
            next.css('bottom', 0);
          }
          if (top + min > w_h) {
            next.css('bottom', w_h - top - offset).css('top', 'auto');
          }
          next.appendTo(wrap);

          next.on('mouseleave.nav', function(e) {
            $(backdrop).remove();
            next.appendTo(_this.parent());
            next
              .off('mouseleave.nav')
              .css('top', 'auto')
              .css('bottom', 'auto');
            _this.parent().removeClass('active');
          });

          $('.smart').length &&
            $('<div class="dropdown-backdrop"/>')
              .insertAfter('.app-aside')
              .on('click', function(next) {
                next && next.trigger('mouseleave.nav');
              });
        });

        wrap.on('mouseleave', function(e) {
          next && next.trigger('mouseleave.nav');
          $('> .nav', wrap).remove();
        });
      }
    };
  }
]);

angular.module('app').directive('uiScrollTo', [
  '$location',
  '$anchorScroll',
  function($location, $anchorScroll) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        el.on('click', function(e) {
          $location.hash(attr.uiScrollTo);
          $anchorScroll();
        });
      }
    };
  }
]);

angular.module('app').directive('uiShift', [
  '$timeout',
  function($timeout) {
    return {
      restrict: 'A',
      link: function(scope, el, attr) {
        // get the $prev or $parent of this el
        var _el = $(el),
          _window = $(window),
          prev = _el.prev(),
          parent,
          width = _window.width();
        !prev.length && (parent = _el.parent());

        function sm() {
          $timeout(function() {
            var method = attr.uiShift;
            var target = attr.target;
            _el.hasClass('in') || _el[method](target).addClass('in');
          });
        }

        function md() {
          parent && parent['prepend'](el);
          !parent && _el['insertAfter'](prev);
          _el.removeClass('in');
        }

        (width < 768 && sm()) || md();

        _window.resize(function() {
          if (width !== _window.width()) {
            $timeout(function() {
              (_window.width() < 768 && sm()) || md();
              width = _window.width();
            });
          }
        });
      }
    };
  }
]);

angular.module('app').directive('uiToggleClass', [
  '$timeout',
  '$document',
  function($timeout, $document) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        el.on('click', function(e) {
          e.preventDefault();
          var classes = attr.uiToggleClass.split(','),
            targets = (attr.target && attr.target.split(',')) || Array(el),
            key = 0;
          angular.forEach(classes, function(_class) {
            var target = targets[targets.length && key];
            _class.indexOf('*') !== -1 && magic(_class, target);
            $(target).toggleClass(_class);
            key++;
          });
          $(el).toggleClass('active');

          function magic(_class, target) {
            var patt = new RegExp(
              '\\s' +
                _class
                  .replace(/\*/g, '[A-Za-z0-9-_]+')
                  .split(' ')
                  .join('\\s|\\s') +
                '\\s',
              'g'
            );
            var cn = ' ' + $(target)[0].className + ' ';
            while (patt.test(cn)) {
              cn = cn.replace(patt, ' ');
            }
            $(target)[0].className = $.trim(cn);
          }
        });
      }
    };
  }
]);

'use strict';

/* Controllers */

// bootstrap controller
app.controller('AccordionDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.oneAtATime = true;

    $scope.groups = [
      {
        title: 'Accordion group header - #1',
        content: 'Dynamic group body - #1'
      },
      {
        title: 'Accordion group header - #2',
        content: 'Dynamic group body - #2'
      }
    ];

    $scope.items = ['Item 1', 'Item 2', 'Item 3'];

    $scope.addItem = function() {
      var newItemNo = $scope.items.length + 1;
      $scope.items.push('Item ' + newItemNo);
    };

    $scope.status = {
      isFirstOpen: true,
      isFirstDisabled: false
    };
  }
]);
app.controller('AlertDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.alerts = [
      {
        type: 'success',
        msg: 'Well done! You successfully read this important alert message.'
      },
      {
        type: 'info',
        msg:
          'Heads up! This alert needs your attention, but it is not super important.'
      },
      {
        type: 'warning',
        msg: 'Warning! Best check yo self, you are not looking too good...'
      }
    ];

    $scope.addAlert = function() {
      $scope.alerts.push({
        type: 'danger',
        msg: 'Oh snap! Change a few things up and try submitting again.'
      });
    };

    $scope.closeAlert = function(index) {
      $scope.alerts.splice(index, 1);
    };
  }
]);
app.controller('ButtonsDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.singleModel = 1;

    $scope.radioModel = 'Middle';

    $scope.checkModel = {
      left: false,
      middle: true,
      right: false
    };
  }
]);
app.controller('CarouselDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.myInterval = 5000;
    var slides = ($scope.slides = []);
    $scope.addSlide = function() {
      slides.push({
        image: 'img/c' + slides.length + '.jpg',
        text: [
          'Carousel text #0',
          'Carousel text #1',
          'Carousel text #2',
          'Carousel text #3'
        ][slides.length % 4]
      });
    };
    for (var i = 0; i < 4; i++) {
      $scope.addSlide();
    }
  }
]);
app.controller('DropdownDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.items = [
      'The first choice!',
      'And another choice for you.',
      'but wait! A third!'
    ];

    $scope.status = {
      isopen: false
    };

    $scope.toggled = function(open) {
      //console.log('Dropdown is now: ', open);
    };

    $scope.toggleDropdown = function($event) {
      $event.preventDefault();
      $event.stopPropagation();
      $scope.status.isopen = !$scope.status.isopen;
    };
  }
]);
app.controller('ModalInstanceCtrl', [
  '$scope',
  '$modalInstance',
  'items',
  function($scope, $modalInstance, items) {
    $scope.items = items;
    $scope.selected = {
      item: $scope.items[0]
    };

    $scope.ok = function() {
      $modalInstance.close($scope.selected.item);
    };

    $scope.cancel = function() {
      $modalInstance.dismiss('cancel');
    };
  }
]);
app.controller('ModalDemoCtrl', [
  '$scope',
  '$modal',
  '$log',
  function($scope, $modal, $log) {
    $scope.items = ['item1', 'item2', 'item3'];
    $scope.open = function(size) {
      var modalInstance = $modal.open({
        templateUrl: 'myModalContent.html',
        controller: 'ModalInstanceCtrl',
        size: size,
        resolve: {
          items: function() {
            return $scope.items;
          }
        }
      });

      modalInstance.result.then(
        function(selectedItem) {
          $scope.selected = selectedItem;
        },
        function() {
          $log.info('Modal dismissed at: ' + new Date());
        }
      );
    };
  }
]);
app.controller('PaginationDemoCtrl', [
  '$scope',
  '$log',
  function($scope, $log) {
    $scope.totalItems = 64;
    $scope.currentPage = 4;

    $scope.setPage = function(pageNo) {
      $scope.currentPage = pageNo;
    };

    $scope.pageChanged = function() {
      $log.info('Page changed to: ' + $scope.currentPage);
    };

    $scope.maxSize = 5;
    $scope.bigTotalItems = 175;
    $scope.bigCurrentPage = 1;
  }
]);
app.controller('PopoverDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.dynamicPopover = 'Hello, World!';
    $scope.dynamicPopoverTitle = 'Title';
  }
]);
app.controller('ProgressDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.max = 200;

    $scope.random = function() {
      var value = Math.floor(Math.random() * 100 + 1);
      var type;

      if (value < 25) {
        type = 'success';
      } else if (value < 50) {
        type = 'info';
      } else if (value < 75) {
        type = 'warning';
      } else {
        type = 'danger';
      }

      $scope.showWarning = type === 'danger' || type === 'warning';

      $scope.dynamic = value;
      $scope.type = type;
    };
    $scope.random();

    $scope.randomStacked = function() {
      $scope.stacked = [];
      var types = ['success', 'info', 'warning', 'danger'];

      for (var i = 0, n = Math.floor(Math.random() * 4 + 1); i < n; i++) {
        var index = Math.floor(Math.random() * 4);
        $scope.stacked.push({
          value: Math.floor(Math.random() * 30 + 1),
          type: types[index]
        });
      }
    };
    $scope.randomStacked();
  }
]);
app.controller('TabsDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.tabs = [
      { title: 'Dynamic Title 1', content: 'Dynamic content 1' },
      {
        title: 'Dynamic Title 2',
        content: 'Dynamic content 2',
        disabled: true
      }
    ];
  }
]);
app.controller('RatingDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.rate = 7;
    $scope.max = 10;
    $scope.isReadonly = false;

    $scope.hoveringOver = function(value) {
      $scope.overStar = value;
      $scope.percent = 100 * (value / $scope.max);
    };
  }
]);
app.controller('TooltipDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.dynamicTooltip = 'Hello, World!';
    $scope.dynamicTooltipText = 'dynamic';
    $scope.htmlTooltip = "I've been made <b>bold</b>!";
  }
]);
app.controller('TypeaheadDemoCtrl', [
  '$scope',
  '$http',
  function($scope, $http) {
    $scope.selected = undefined;
    $scope.states = [
      'Alabama',
      'Alaska',
      'Arizona',
      'Arkansas',
      'California',
      'Colorado',
      'Connecticut',
      'Delaware',
      'Florida',
      'Georgia',
      'Hawaii',
      'Idaho',
      'Illinois',
      'Indiana',
      'Iowa',
      'Kansas',
      'Kentucky',
      'Louisiana',
      'Maine',
      'Maryland',
      'Massachusetts',
      'Michigan',
      'Minnesota',
      'Mississippi',
      'Missouri',
      'Montana',
      'Nebraska',
      'Nevada',
      'New Hampshire',
      'New Jersey',
      'New Mexico',
      'New York',
      'North Dakota',
      'North Carolina',
      'Ohio',
      'Oklahoma',
      'Oregon',
      'Pennsylvania',
      'Rhode Island',
      'South Carolina',
      'South Dakota',
      'Tennessee',
      'Texas',
      'Utah',
      'Vermont',
      'Virginia',
      'Washington',
      'West Virginia',
      'Wisconsin',
      'Wyoming'
    ];
    // Any function returning a promise object can be used to load values asynchronously
    $scope.getLocation = function(val) {
      return $http
        .get('http://maps.googleapis.com/maps/api/geocode/json', {
          params: {
            address: val,
            sensor: false
          }
        })
        .then(function(res) {
          var addresses = [];
          angular.forEach(res.data.results, function(item) {
            addresses.push(item.formatted_address);
          });
          return addresses;
        });
    };
  }
]);
app.controller('DatepickerDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.today = function() {
      $scope.dt = new Date();
    };
    $scope.today();

    $scope.clear = function() {
      $scope.dt = null;
    };

    // Disable weekend selection
    $scope.disabled = function(date, mode) {
      return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
    };

    $scope.toggleMin = function() {
      $scope.minDate = $scope.minDate ? null : new Date();
    };
    $scope.toggleMin();

    $scope.open = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.opened = true;
    };

    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1,
      class: 'datepicker'
    };

    $scope.initDate = new Date('2016-15-20');
    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[0];
  }
]);
app.controller('TimepickerDemoCtrl', [
  '$scope',
  function($scope) {
    $scope.mytime = new Date();

    $scope.hstep = 1;
    $scope.mstep = 15;

    $scope.options = {
      hstep: [1, 2, 3],
      mstep: [1, 5, 10, 15, 25, 30]
    };

    $scope.ismeridian = true;
    $scope.toggleMode = function() {
      $scope.ismeridian = !$scope.ismeridian;
    };

    $scope.update = function() {
      var d = new Date();
      d.setHours(14);
      d.setMinutes(0);
      $scope.mytime = d;
    };

    $scope.changed = function() {
      //console.log('Time changed to: ' + $scope.mytime);
    };

    $scope.clear = function() {
      $scope.mytime = null;
    };
  }
]);

/**
 * Created by hamidehnouri on 10/10/2016 AD.
 */

app.filter('persianNumber', function () {
  return persianNumber
})

function persianNumber (value) {
  value = String(value)
  if (!value) return ''
  var s = value.toString()
  s = s
    .replace(/1/g, '۱')
    .replace(/2/g, '۲')
    .replace(/3/g, '۳')
    .replace(/4/g, '۴')
    .replace(/5/g, '۵')
    .replace(/6/g, '۶')
    .replace(/7/g, '۷')
    .replace(/8/g, '۸')
    .replace(/9/g, '۹')
    .replace(/0/g, '۰')
    .replace(/,/g, '،')
  return s
}

app.filter('englishNumber', function () {
  return englishNumber
})

function englishNumber (value) {
  value = String(value)
  if (!value) return ''
  var s = value.toString()
  s = s
    .replace(/۱/g, '1')
    .replace(/۲/g, '2')
    .replace(/۳/g, '3')
    .replace(/۴/g, '4')
    .replace(/۵/g, '5')
    .replace(/۶/g, '6')
    .replace(/۷/g, '7')
    .replace(/۸/g, '8')
    .replace(/۹/g, '9')
    .replace(/۰/g, '0')
    .replace(/،/g, ',')
  return s
}

app.filter('translateNumber', [
  '$translate',
  function ($translate) {
    return function (value) {
      var locale = $translate.use()
      if (locale == 'en') {
        return englishNumber(value)
      } else {
        return persianNumber(value)
      }
    }
  }
])

app.filter('getDay', [
  '$translate',
  function ($translate) {
    return function (epoch) {
      var date = new Date(Number(epoch))
      var locale = $translate.use()
      if (locale == 'en') {
        return date.getDate()
      } else {
        return date.getJalaliDate()
      }
    }
  }
])

app.filter('getMonth', [
  '$translate',
  function ($translate) {
    return function (epoch) {
      var date = new Date(Number(epoch))
      var locale = $translate.use()
      if (locale == 'en') {
        return date.getMonth() + 1
      } else {
        return date.getJalaliMonth()
      }
    }
  }
])

app.filter('getMonthName', [
  '$translate',
  'translateFilter',
  function ($translate, translateFilter) {
    return function (epoch) {
      var date = new Date(Number(epoch))
      var locale = $translate.use()
      if (locale == 'en') {
        return translateFilter(date.getMonth() + 1 + '-month')
      } else {
        return translateFilter(date.getJalaliMonth() + 1 + '-month')
      }
    }
  }
])

app.filter('getYear', [
  '$translate',
  function ($translate) {
    return function (epoch) {
      var date = new Date(Number(epoch))
      var locale = $translate.use()
      if (locale == 'en') {
        return date.getFullYear()
      } else {
        return date.getJalaliFullYear()
      }
    }
  }
])

app.filter('translateDate', [
  '$translate',
  'PersianDateService',
  function ($translate, PersianDateService) {
    return function (epoch) {
      var date = new Date(Number(epoch))
      var locale = $translate.use()
      if (locale === 'en') {
        return (
          date.getFullYear() +
          '/' +
          (date.getMonth() + 1) +
          '/' +
          date.getDate()
        )
      } else {
        return PersianDateService.getFullYear(date) + '/' + (PersianDateService.getMonth(date) + 1) + '/' + PersianDateService.getDate(date)
      }
    }
  }
])
app.filter('trimUsername', [
  'usernameService',
  function (usernameService) {
    return function (username) {
      return username?usernameService.trim(username):username
    }
  }
])

app.filter('humanSize', [
  function () {
    return function (size) {
      if (size === undefined || size === null) {
        size = 0
      }
      return humanFormat(size, {decimals: 0, separator: '/' , unit: 'B'})
    }
  }
])
app.filter('humanTime', [
  function () {
    return function (size) {
      if (size === undefined || size === null) {
        size = 0
      }
      var timeScale = new humanFormat.Scale({
        'دقیقه': 60,
        'ساعت': 3600,
        'روز': 86400,
        'هفته': 604800
      })
      return humanFormat(size, {scale: timeScale, decimals: 0})
    }
  }
])

app.filter('cleanupUsername', [
  function () {
    return function (username) {
      return username.split('@')[0];
    }
  }
])

